// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gpu_blit_rect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_frameBuffer_V_AWVALID,
        m_axi_frameBuffer_V_AWREADY,
        m_axi_frameBuffer_V_AWADDR,
        m_axi_frameBuffer_V_AWID,
        m_axi_frameBuffer_V_AWLEN,
        m_axi_frameBuffer_V_AWSIZE,
        m_axi_frameBuffer_V_AWBURST,
        m_axi_frameBuffer_V_AWLOCK,
        m_axi_frameBuffer_V_AWCACHE,
        m_axi_frameBuffer_V_AWPROT,
        m_axi_frameBuffer_V_AWQOS,
        m_axi_frameBuffer_V_AWREGION,
        m_axi_frameBuffer_V_AWUSER,
        m_axi_frameBuffer_V_WVALID,
        m_axi_frameBuffer_V_WREADY,
        m_axi_frameBuffer_V_WDATA,
        m_axi_frameBuffer_V_WSTRB,
        m_axi_frameBuffer_V_WLAST,
        m_axi_frameBuffer_V_WID,
        m_axi_frameBuffer_V_WUSER,
        m_axi_frameBuffer_V_ARVALID,
        m_axi_frameBuffer_V_ARREADY,
        m_axi_frameBuffer_V_ARADDR,
        m_axi_frameBuffer_V_ARID,
        m_axi_frameBuffer_V_ARLEN,
        m_axi_frameBuffer_V_ARSIZE,
        m_axi_frameBuffer_V_ARBURST,
        m_axi_frameBuffer_V_ARLOCK,
        m_axi_frameBuffer_V_ARCACHE,
        m_axi_frameBuffer_V_ARPROT,
        m_axi_frameBuffer_V_ARQOS,
        m_axi_frameBuffer_V_ARREGION,
        m_axi_frameBuffer_V_ARUSER,
        m_axi_frameBuffer_V_RVALID,
        m_axi_frameBuffer_V_RREADY,
        m_axi_frameBuffer_V_RDATA,
        m_axi_frameBuffer_V_RLAST,
        m_axi_frameBuffer_V_RID,
        m_axi_frameBuffer_V_RUSER,
        m_axi_frameBuffer_V_RRESP,
        m_axi_frameBuffer_V_BVALID,
        m_axi_frameBuffer_V_BREADY,
        m_axi_frameBuffer_V_BRESP,
        m_axi_frameBuffer_V_BID,
        m_axi_frameBuffer_V_BUSER,
        frameBuffer_V1,
        arg0_V,
        arg1_V,
        arg2_V,
        arg3_V,
        arg5_V,
        arg6_V,
        clip_x_V,
        clip_y_V,
        clip_w_V,
        clip_h_V
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 21'd2048;
parameter    ap_ST_fsm_state15 = 21'd4096;
parameter    ap_ST_fsm_pp1_stage0 = 21'd8192;
parameter    ap_ST_fsm_state20 = 21'd16384;
parameter    ap_ST_fsm_pp2_stage0 = 21'd32768;
parameter    ap_ST_fsm_state24 = 21'd65536;
parameter    ap_ST_fsm_state25 = 21'd131072;
parameter    ap_ST_fsm_state26 = 21'd262144;
parameter    ap_ST_fsm_state27 = 21'd524288;
parameter    ap_ST_fsm_state28 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_frameBuffer_V_AWVALID;
input   m_axi_frameBuffer_V_AWREADY;
output  [31:0] m_axi_frameBuffer_V_AWADDR;
output  [0:0] m_axi_frameBuffer_V_AWID;
output  [31:0] m_axi_frameBuffer_V_AWLEN;
output  [2:0] m_axi_frameBuffer_V_AWSIZE;
output  [1:0] m_axi_frameBuffer_V_AWBURST;
output  [1:0] m_axi_frameBuffer_V_AWLOCK;
output  [3:0] m_axi_frameBuffer_V_AWCACHE;
output  [2:0] m_axi_frameBuffer_V_AWPROT;
output  [3:0] m_axi_frameBuffer_V_AWQOS;
output  [3:0] m_axi_frameBuffer_V_AWREGION;
output  [0:0] m_axi_frameBuffer_V_AWUSER;
output   m_axi_frameBuffer_V_WVALID;
input   m_axi_frameBuffer_V_WREADY;
output  [31:0] m_axi_frameBuffer_V_WDATA;
output  [3:0] m_axi_frameBuffer_V_WSTRB;
output   m_axi_frameBuffer_V_WLAST;
output  [0:0] m_axi_frameBuffer_V_WID;
output  [0:0] m_axi_frameBuffer_V_WUSER;
output   m_axi_frameBuffer_V_ARVALID;
input   m_axi_frameBuffer_V_ARREADY;
output  [31:0] m_axi_frameBuffer_V_ARADDR;
output  [0:0] m_axi_frameBuffer_V_ARID;
output  [31:0] m_axi_frameBuffer_V_ARLEN;
output  [2:0] m_axi_frameBuffer_V_ARSIZE;
output  [1:0] m_axi_frameBuffer_V_ARBURST;
output  [1:0] m_axi_frameBuffer_V_ARLOCK;
output  [3:0] m_axi_frameBuffer_V_ARCACHE;
output  [2:0] m_axi_frameBuffer_V_ARPROT;
output  [3:0] m_axi_frameBuffer_V_ARQOS;
output  [3:0] m_axi_frameBuffer_V_ARREGION;
output  [0:0] m_axi_frameBuffer_V_ARUSER;
input   m_axi_frameBuffer_V_RVALID;
output   m_axi_frameBuffer_V_RREADY;
input  [31:0] m_axi_frameBuffer_V_RDATA;
input   m_axi_frameBuffer_V_RLAST;
input  [0:0] m_axi_frameBuffer_V_RID;
input  [0:0] m_axi_frameBuffer_V_RUSER;
input  [1:0] m_axi_frameBuffer_V_RRESP;
input   m_axi_frameBuffer_V_BVALID;
output   m_axi_frameBuffer_V_BREADY;
input  [1:0] m_axi_frameBuffer_V_BRESP;
input  [0:0] m_axi_frameBuffer_V_BID;
input  [0:0] m_axi_frameBuffer_V_BUSER;
input  [29:0] frameBuffer_V1;
input  [15:0] arg0_V;
input  [15:0] arg1_V;
input  [15:0] arg2_V;
input  [15:0] arg3_V;
input  [15:0] arg5_V;
input  [15:0] arg6_V;
input  [15:0] clip_x_V;
input  [15:0] clip_y_V;
input  [15:0] clip_w_V;
input  [15:0] clip_h_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_frameBuffer_V_AWVALID;
reg m_axi_frameBuffer_V_WVALID;
reg m_axi_frameBuffer_V_ARVALID;
reg m_axi_frameBuffer_V_RREADY;
reg m_axi_frameBuffer_V_BREADY;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] rowBuffer_V_address0;
reg    rowBuffer_V_ce0;
wire   [31:0] rowBuffer_V_q0;
reg   [10:0] rowBuffer_V_address1;
reg    rowBuffer_V_ce1;
reg    rowBuffer_V_we1;
reg   [31:0] rowBuffer_V_d1;
reg    frameBuffer_V_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    frameBuffer_V_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] tmp_12_reg_1032;
reg    frameBuffer_V_blk_n_AW;
wire    ap_CS_fsm_state20;
reg    frameBuffer_V_blk_n_W;
reg    ap_enable_reg_pp2_iter2;
wire    ap_block_pp2_stage0_flag00000000;
reg   [0:0] tmp_16_reg_1102;
reg   [0:0] ap_reg_pp2_iter1_tmp_16_reg_1102;
reg    frameBuffer_V_blk_n_B;
wire    ap_CS_fsm_state28;
reg   [16:0] col_reg_244;
reg   [16:0] ap_reg_pp0_iter1_col_reg_244;
wire    ap_block_state12_pp0_stage0_iter0;
reg    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_flag00011001;
reg   [16:0] col1_reg_256;
reg   [16:0] col2_reg_267;
wire   [15:0] clip_x_V_load_arg0_V_fu_288_p3;
reg   [15:0] clip_x_V_load_arg0_V_reg_901;
wire   [15:0] y_V_fu_306_p3;
reg   [15:0] y_V_reg_908;
wire   [16:0] r_V_2_fu_352_p3;
reg   [16:0] r_V_2_reg_914;
wire   [16:0] r_V_18_fu_398_p3;
reg   [16:0] r_V_18_reg_920;
wire   [31:0] frameBuffer_V1_cast_fu_406_p1;
reg   [31:0] frameBuffer_V1_cast_reg_926;
wire    ap_CS_fsm_state2;
wire   [31:0] r_V_25_fu_410_p3;
reg   [31:0] r_V_25_reg_931;
wire   [7:0] newA_V_fu_418_p4;
reg   [7:0] newA_V_reg_936;
wire   [21:0] start_x_cast1_fu_446_p1;
reg   [21:0] start_x_cast1_reg_942;
wire   [17:0] start_y_cast9_fu_455_p1;
reg   [17:0] start_y_cast9_reg_947;
wire   [0:0] or_cond_fu_477_p2;
reg   [0:0] or_cond_reg_952;
wire   [17:0] clipped_w_fu_483_p2;
reg   [17:0] clipped_w_reg_956;
wire   [17:0] clipped_h_fu_489_p2;
reg   [17:0] clipped_h_reg_963;
wire   [0:0] tmp_9_fu_495_p2;
reg   [0:0] tmp_9_reg_968;
wire   [0:0] tmp_s_fu_501_p2;
reg   [0:0] tmp_s_reg_972;
wire   [15:0] lhs_V_4_cast_fu_513_p1;
reg   [15:0] lhs_V_4_cast_reg_976;
wire   [16:0] rhs_V_8_cast_fu_531_p1;
reg   [16:0] rhs_V_8_cast_reg_983;
wire   [15:0] r_V_9_fu_539_p2;
reg   [15:0] r_V_9_reg_988;
wire   [16:0] rhs_V_4_cast_fu_545_p1;
reg   [16:0] rhs_V_4_cast_reg_993;
wire   [16:0] rhs_V_11_cast_fu_559_p1;
reg   [16:0] rhs_V_11_cast_reg_998;
wire   [31:0] tmp_2_fu_563_p1;
reg   [31:0] tmp_2_reg_1003;
wire   [16:0] row_1_fu_576_p2;
reg   [16:0] row_1_reg_1011;
wire    ap_CS_fsm_state3;
wire   [21:0] row_offset_fu_617_p2;
reg   [21:0] row_offset_reg_1016;
wire   [0:0] tmp_4_fu_571_p2;
wire   [31:0] sum1_fu_625_p2;
reg   [31:0] sum1_reg_1021;
wire    ap_CS_fsm_state4;
reg   [31:0] frameBuffer_V_addr_reg_1026;
reg    ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY;
wire   [0:0] tmp_12_fu_640_p2;
reg   [0:0] ap_reg_pp0_iter1_tmp_12_reg_1032;
wire   [16:0] col_1_fu_645_p2;
reg   [16:0] col_1_reg_1036;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] frameBuffer_V_addr_r_1_reg_1041;
wire   [0:0] tmp_14_fu_660_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state16_pp1_stage0_iter0;
wire    ap_block_state17_pp1_stage0_iter1;
wire    ap_block_state18_pp1_stage0_iter2;
wire    ap_block_state19_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_flag00011001;
wire   [16:0] col_3_fu_665_p2;
reg    ap_enable_reg_pp1_iter0;
reg   [10:0] rowBuffer_V_addr_1_reg_1055;
reg   [10:0] ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055;
reg   [10:0] ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055;
reg   [7:0] oldR_V_reg_1061;
reg   [7:0] oldG_V_reg_1066;
wire   [7:0] oldB_V_fu_706_p1;
reg   [7:0] oldB_V_reg_1071;
wire   [0:0] tmp_36_fu_722_p1;
reg   [0:0] tmp_36_reg_1076;
reg   [0:0] ap_reg_pp1_iter2_tmp_36_reg_1076;
reg   [6:0] tmp_26_reg_1081;
reg   [6:0] ap_reg_pp1_iter2_tmp_26_reg_1081;
reg   [8:0] tmp_17_reg_1086;
wire   [15:0] r_V_8_fu_751_p2;
reg   [15:0] r_V_8_reg_1091;
reg   [8:0] tmp_20_reg_1097;
wire   [0:0] tmp_16_fu_871_p2;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state21_pp2_stage0_iter0;
wire    ap_block_state22_pp2_stage0_iter1;
wire    ap_block_state23_pp2_stage0_iter2;
reg    ap_sig_ioackin_m_axi_frameBuffer_V_WREADY;
reg    ap_block_state23_io;
reg    ap_block_pp2_stage0_flag00011001;
wire   [16:0] col_2_fu_876_p2;
reg    ap_enable_reg_pp2_iter0;
reg   [31:0] rowBuffer_V_load_reg_1116;
reg    ap_enable_reg_pp2_iter1;
wire    ap_CS_fsm_state11;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state15;
wire    ap_block_pp1_stage0_flag00011011;
reg    ap_condition_pp1_exit_iter0_state16;
reg    ap_enable_reg_pp1_iter1;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY;
reg    ap_block_pp2_stage0_flag00011011;
reg    ap_condition_pp2_exit_iter0_state21;
reg   [16:0] row_reg_233;
reg   [16:0] col_phi_fu_248_p4;
wire   [31:0] col_cast5_fu_651_p1;
wire   [31:0] col1_cast4_fu_671_p1;
wire    ap_block_pp1_stage0_flag00000000;
wire   [31:0] col2_cast2_fu_882_p1;
reg    ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY;
reg    ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY;
reg    ap_reg_ioackin_m_axi_frameBuffer_V_WREADY;
wire    ap_block_pp2_stage0_flag00001001;
wire   [31:0] r_V_27_fu_855_p5;
wire   [0:0] tmp_fu_282_p2;
wire   [0:0] tmp_1_fu_300_p2;
wire   [16:0] lhs_V_1_fu_314_p1;
wire   [16:0] rhs_V_1_fu_318_p1;
wire   [16:0] lhs_V_fu_328_p1;
wire   [16:0] rhs_V_fu_336_p1;
wire   [16:0] r_V_1_fu_322_p2;
wire   [16:0] r_V_fu_340_p2;
wire   [0:0] tmp_8_fu_346_p2;
wire   [16:0] lhs_V_3_fu_360_p1;
wire   [16:0] rhs_V_3_fu_364_p1;
wire   [16:0] lhs_V_2_fu_374_p1;
wire   [16:0] rhs_V_2_fu_382_p1;
wire   [16:0] r_V_17_fu_368_p2;
wire   [16:0] r_V_3_fu_386_p2;
wire   [0:0] tmp_3_fu_392_p2;
wire   [16:0] start_x_cast_fu_452_p1;
wire   [16:0] start_y_cast_fu_458_p1;
wire   [0:0] tmp_5_fu_467_p2;
wire   [0:0] tmp_6_fu_472_p2;
wire   [17:0] end_x_cast8_fu_461_p1;
wire   [17:0] start_x_cast2_fu_449_p1;
wire   [17:0] end_y_cast7_fu_464_p1;
wire   [7:0] r_V_4_fu_507_p2;
wire   [7:0] newB_V_fu_442_p1;
wire   [7:0] r_V_6_fu_525_p0;
wire   [7:0] r_V_6_fu_525_p1;
wire   [15:0] lhs_V_4_fu_517_p1;
wire   [15:0] r_V_6_fu_525_p2;
wire   [7:0] newG_V_fu_432_p4;
wire   [7:0] r_V_9_fu_539_p0;
wire   [7:0] r_V_9_fu_539_p1;
wire   [7:0] newR_V_fu_428_p1;
wire   [7:0] r_V_21_fu_553_p0;
wire   [7:0] r_V_21_fu_553_p1;
wire   [15:0] r_V_21_fu_553_p2;
wire   [17:0] row_cast_fu_567_p1;
wire   [17:0] y_idx_fu_582_p2;
wire   [10:0] tmp_24_fu_587_p1;
wire   [14:0] tmp_25_fu_599_p1;
wire   [21:0] p_shl_fu_591_p3;
wire   [21:0] p_shl1_fu_603_p3;
wire   [21:0] tmp_10_fu_611_p2;
wire  signed [31:0] tmp_11_fu_622_p1;
wire   [17:0] col_cast_fu_636_p1;
wire   [17:0] col1_cast_fu_656_p1;
wire   [7:0] oldA_V_fu_676_p4;
wire   [0:0] tmp_19_fu_710_p2;
wire   [7:0] outA_V_fu_715_p3;
wire   [16:0] grp_fu_887_p3;
wire   [7:0] r_V_8_fu_751_p0;
wire   [7:0] r_V_8_fu_751_p1;
wire   [16:0] grp_fu_894_p3;
wire   [16:0] lhs_V_7_cast_fu_768_p1;
wire   [16:0] r_V_10_fu_775_p2;
wire   [15:0] tmp_18_fu_771_p2;
wire   [8:0] tmp_21_fu_787_p4;
wire   [24:0] tmp_22_fu_805_p5;
wire   [24:0] r_V_26_fu_780_p3;
wire   [0:0] tmp_35_fu_797_p3;
wire   [8:0] tmp_27_fu_822_p3;
wire   [24:0] tmp_23_fu_816_p2;
wire   [8:0] tmp_30_fu_845_p4;
wire   [6:0] tmp_29_fu_835_p4;
wire   [8:0] tmp_28_fu_830_p2;
wire   [17:0] col2_cast_fu_867_p1;
wire   [7:0] grp_fu_887_p0;
wire   [7:0] grp_fu_887_p1;
wire   [15:0] grp_fu_887_p2;
wire   [7:0] grp_fu_894_p0;
wire   [7:0] grp_fu_894_p1;
wire   [15:0] grp_fu_894_p2;
reg   [20:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [15:0] grp_fu_887_p00;
wire   [15:0] grp_fu_894_p00;
wire   [15:0] r_V_21_fu_553_p00;
wire   [15:0] r_V_6_fu_525_p00;
wire   [15:0] r_V_8_fu_751_p00;
wire   [15:0] r_V_9_fu_539_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_frameBuffer_V_WREADY = 1'b0;
end

gpu_blit_rect_rowbkb #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
rowBuffer_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rowBuffer_V_address0),
    .ce0(rowBuffer_V_ce0),
    .q0(rowBuffer_V_q0),
    .address1(rowBuffer_V_address1),
    .ce1(rowBuffer_V_ce1),
    .we1(rowBuffer_V_we1),
    .d1(rowBuffer_V_d1)
);

gpu_mac_muladd_8ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gpu_mac_muladd_8ncud_U8(
    .din0(grp_fu_887_p0),
    .din1(grp_fu_887_p1),
    .din2(grp_fu_887_p2),
    .dout(grp_fu_887_p3)
);

gpu_mac_muladd_8ncud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
gpu_mac_muladd_8ncud_U9(
    .din0(grp_fu_894_p0),
    .din1(grp_fu_894_p1),
    .din2(grp_fu_894_p2),
    .dout(grp_fu_894_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state12))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state12 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp1_exit_iter0_state16))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state16)) begin
                ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp1_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp2_exit_iter0_state21))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY == 1'b1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state21)) begin
                ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state21 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp2_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if (((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY == 1'b1))) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= 1'b0;
            end else if ((1'b1 == m_axi_frameBuffer_V_ARREADY)) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state20)) begin
            if ((ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= 1'b0;
            end else if ((1'b1 == m_axi_frameBuffer_V_AWREADY)) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'd1 == ap_reg_pp2_iter1_tmp_16_reg_1102))) begin
            if ((ap_block_pp2_stage0_flag00011001 == 1'b0)) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= 1'b0;
            end else if (((1'b1 == m_axi_frameBuffer_V_WREADY) & (ap_block_pp2_stage0_flag00001001 == 1'b0))) begin
                ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        col1_reg_256 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0) & (1'd1 == tmp_14_fu_660_p2))) begin
        col1_reg_256 <= col_3_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY == 1'b1))) begin
        col2_reg_267 <= 17'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0) & (1'd1 == tmp_16_fu_871_p2))) begin
        col2_reg_267 <= col_2_fu_876_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_12_reg_1032 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        col_reg_244 <= col_1_reg_1036;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        col_reg_244 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) & (m_axi_frameBuffer_V_BVALID == 1'b1))) begin
        row_reg_233 <= row_1_reg_1011;
    end else if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == or_cond_fu_477_p2))) begin
        row_reg_233 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_col_reg_244 <= col_reg_244;
        ap_reg_pp0_iter1_tmp_12_reg_1032 <= tmp_12_reg_1032;
        tmp_12_reg_1032 <= tmp_12_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055 <= rowBuffer_V_addr_1_reg_1055;
        oldB_V_reg_1071 <= oldB_V_fu_706_p1;
        oldG_V_reg_1066 <= {{rowBuffer_V_q0[15:8]}};
        oldR_V_reg_1061 <= {{rowBuffer_V_q0[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp1_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055 <= ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055;
        ap_reg_pp1_iter2_tmp_26_reg_1081 <= tmp_26_reg_1081;
        ap_reg_pp1_iter2_tmp_36_reg_1076 <= tmp_36_reg_1076;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp2_iter1_tmp_16_reg_1102 <= tmp_16_reg_1102;
        tmp_16_reg_1102 <= tmp_16_fu_871_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        clip_x_V_load_arg0_V_reg_901 <= clip_x_V_load_arg0_V_fu_288_p3;
        r_V_18_reg_920 <= r_V_18_fu_398_p3;
        r_V_2_reg_914 <= r_V_2_fu_352_p3;
        y_V_reg_908 <= y_V_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == or_cond_fu_477_p2))) begin
        clipped_h_reg_963 <= clipped_h_fu_489_p2;
        clipped_w_reg_956 <= clipped_w_fu_483_p2;
        lhs_V_4_cast_reg_976[7 : 0] <= lhs_V_4_cast_fu_513_p1[7 : 0];
        r_V_9_reg_988 <= r_V_9_fu_539_p2;
        rhs_V_11_cast_reg_998[15 : 0] <= rhs_V_11_cast_fu_559_p1[15 : 0];
        rhs_V_4_cast_reg_993[15 : 0] <= rhs_V_4_cast_fu_545_p1[15 : 0];
        rhs_V_8_cast_reg_983[15 : 0] <= rhs_V_8_cast_fu_531_p1[15 : 0];
        tmp_2_reg_1003[17 : 0] <= tmp_2_fu_563_p1[17 : 0];
        tmp_9_reg_968 <= tmp_9_fu_495_p2;
        tmp_s_reg_972 <= tmp_s_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        col_1_reg_1036 <= col_1_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        frameBuffer_V1_cast_reg_926[29 : 0] <= frameBuffer_V1_cast_fu_406_p1[29 : 0];
        newA_V_reg_936 <= {{arg6_V[15:8]}};
        or_cond_reg_952 <= or_cond_fu_477_p2;
        r_V_25_reg_931 <= r_V_25_fu_410_p3;
        start_x_cast1_reg_942[15 : 0] <= start_x_cast1_fu_446_p1[15 : 0];
        start_y_cast9_reg_947[15 : 0] <= start_y_cast9_fu_455_p1[15 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_1032 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        frameBuffer_V_addr_r_1_reg_1041 <= m_axi_frameBuffer_V_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY == 1'b1))) begin
        frameBuffer_V_addr_reg_1026 <= sum1_reg_1021;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0))) begin
        r_V_8_reg_1091 <= r_V_8_fu_751_p2;
        tmp_17_reg_1086 <= {{grp_fu_887_p3[16:8]}};
        tmp_20_reg_1097 <= {{grp_fu_894_p3[16:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'd1 == tmp_14_fu_660_p2))) begin
        rowBuffer_V_addr_1_reg_1055 <= col1_cast4_fu_671_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter1) & (1'd1 == tmp_16_reg_1102))) begin
        rowBuffer_V_load_reg_1116 <= rowBuffer_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == or_cond_reg_952))) begin
        row_1_reg_1011 <= row_1_fu_576_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == or_cond_reg_952) & (1'd1 == tmp_4_fu_571_p2))) begin
        row_offset_reg_1016 <= row_offset_fu_617_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sum1_reg_1021 <= sum1_fu_625_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0))) begin
        tmp_26_reg_1081 <= {{outA_V_fu_715_p3[7:1]}};
        tmp_36_reg_1076 <= tmp_36_fu_722_p1;
    end
end

always @ (*) begin
    if ((tmp_12_fu_640_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_14_fu_660_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((1'd0 == tmp_16_fu_871_p2)) begin
        ap_condition_pp2_exit_iter0_state21 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state21 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state3) & ((or_cond_reg_952 == 1'd0) | (tmp_4_fu_571_p2 == 1'd0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp1_iter0) & (1'b0 == ap_enable_reg_pp1_iter1) & (1'b0 == ap_enable_reg_pp1_iter2) & (1'b0 == ap_enable_reg_pp1_iter3))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp2_iter0) & (1'b0 == ap_enable_reg_pp2_iter1) & (1'b0 == ap_enable_reg_pp2_iter2))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((or_cond_reg_952 == 1'd0) | (tmp_4_fu_571_p2 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY)) begin
        ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY = m_axi_frameBuffer_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY)) begin
        ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = m_axi_frameBuffer_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_WREADY)) begin
        ap_sig_ioackin_m_axi_frameBuffer_V_WREADY = m_axi_frameBuffer_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_frameBuffer_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_12_reg_1032 == 1'd1))) begin
        col_phi_fu_248_p4 = col_1_reg_1036;
    end else begin
        col_phi_fu_248_p4 = col_reg_244;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        frameBuffer_V_blk_n_AR = m_axi_frameBuffer_V_ARREADY;
    end else begin
        frameBuffer_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        frameBuffer_V_blk_n_AW = m_axi_frameBuffer_V_AWREADY;
    end else begin
        frameBuffer_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        frameBuffer_V_blk_n_B = m_axi_frameBuffer_V_BVALID;
    end else begin
        frameBuffer_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (tmp_12_reg_1032 == 1'd1))) begin
        frameBuffer_V_blk_n_R = m_axi_frameBuffer_V_RVALID;
    end else begin
        frameBuffer_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0_flag00000000 == 1'b0) & (1'd1 == ap_reg_pp2_iter1_tmp_16_reg_1102))) begin
        frameBuffer_V_blk_n_W = m_axi_frameBuffer_V_WREADY;
    end else begin
        frameBuffer_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY))) begin
        m_axi_frameBuffer_V_ARVALID = 1'b1;
    end else begin
        m_axi_frameBuffer_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY))) begin
        m_axi_frameBuffer_V_AWVALID = 1'b1;
    end else begin
        m_axi_frameBuffer_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) & (m_axi_frameBuffer_V_BVALID == 1'b1))) begin
        m_axi_frameBuffer_V_BREADY = 1'b1;
    end else begin
        m_axi_frameBuffer_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (tmp_12_reg_1032 == 1'd1) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        m_axi_frameBuffer_V_RREADY = 1'b1;
    end else begin
        m_axi_frameBuffer_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp2_iter2) & (1'd1 == ap_reg_pp2_iter1_tmp_16_reg_1102) & (ap_block_pp2_stage0_flag00001001 == 1'b0) & (1'b0 == ap_reg_ioackin_m_axi_frameBuffer_V_WREADY))) begin
        m_axi_frameBuffer_V_WVALID = 1'b1;
    end else begin
        m_axi_frameBuffer_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp2_stage0_flag00000000 == 1'b0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_enable_reg_pp2_iter0))) begin
        rowBuffer_V_address0 = col2_cast2_fu_882_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00000000 == 1'b0))) begin
        rowBuffer_V_address0 = col1_cast4_fu_671_p1;
    end else begin
        rowBuffer_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((ap_block_pp1_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == tmp_9_reg_968)))) begin
        rowBuffer_V_address1 = ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        rowBuffer_V_address1 = col_cast5_fu_651_p1;
    end else begin
        rowBuffer_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_block_pp2_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp2_iter0)))) begin
        rowBuffer_V_ce0 = 1'b1;
    end else begin
        rowBuffer_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == tmp_9_reg_968)))) begin
        rowBuffer_V_ce1 = 1'b1;
    end else begin
        rowBuffer_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp1_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == tmp_9_reg_968))) begin
        rowBuffer_V_d1 = r_V_25_reg_931;
    end else if (((tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0) & (ap_block_pp1_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3))) begin
        rowBuffer_V_d1 = r_V_27_fu_855_p5;
    end else if (((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        rowBuffer_V_d1 = frameBuffer_V_addr_r_1_reg_1041;
    end else begin
        rowBuffer_V_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd1 == ap_reg_pp0_iter1_tmp_12_reg_1032)) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (tmp_9_reg_968 == 1'd0) & (tmp_s_reg_972 == 1'd0) & (1'b1 == ap_enable_reg_pp1_iter3)) | ((ap_block_pp1_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (1'd1 == tmp_9_reg_968)))) begin
        rowBuffer_V_we1 = 1'b1;
    end else begin
        rowBuffer_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((or_cond_reg_952 == 1'd0) | (tmp_4_fu_571_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_12_fu_640_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_12_fu_640_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_enable_reg_pp1_iter2 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_14_fu_660_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_block_pp1_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp1_iter3) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((1'b1 == ap_enable_reg_pp1_iter0) & (ap_block_pp1_stage0_flag00011011 == 1'b0) & (tmp_14_fu_660_p2 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_16_fu_871_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp2_iter2) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp2_iter0) & (ap_block_pp2_stage0_flag00011011 == 1'b0) & (1'd0 == tmp_16_fu_871_p2) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (m_axi_frameBuffer_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_12_reg_1032 == 1'd1) & (1'b0 == m_axi_frameBuffer_V_RVALID));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp0_iter1) & (tmp_12_reg_1032 == 1'd1) & (1'b0 == m_axi_frameBuffer_V_RVALID));
end

assign ap_block_pp1_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_flag00001001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_flag00011001 = ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state23_io));
end

always @ (*) begin
    ap_block_pp2_stage0_flag00011011 = ((1'b1 == ap_enable_reg_pp2_iter2) & (1'b1 == ap_block_state23_io));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter1 = ((tmp_12_reg_1032 == 1'd1) & (1'b0 == m_axi_frameBuffer_V_RVALID));
end

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((1'd1 == ap_reg_pp2_iter1_tmp_16_reg_1102) & (1'b0 == ap_sig_ioackin_m_axi_frameBuffer_V_WREADY));
end

assign ap_block_state23_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign clip_x_V_load_arg0_V_fu_288_p3 = ((tmp_fu_282_p2[0:0] === 1'b1) ? clip_x_V : arg0_V);

assign clipped_h_fu_489_p2 = (end_y_cast7_fu_464_p1 - start_y_cast9_fu_455_p1);

assign clipped_w_fu_483_p2 = (end_x_cast8_fu_461_p1 - start_x_cast2_fu_449_p1);

assign col1_cast4_fu_671_p1 = col1_reg_256;

assign col1_cast_fu_656_p1 = col1_reg_256;

assign col2_cast2_fu_882_p1 = col2_reg_267;

assign col2_cast_fu_867_p1 = col2_reg_267;

assign col_1_fu_645_p2 = (col_phi_fu_248_p4 + 17'd1);

assign col_2_fu_876_p2 = (col2_reg_267 + 17'd1);

assign col_3_fu_665_p2 = (col1_reg_256 + 17'd1);

assign col_cast5_fu_651_p1 = ap_reg_pp0_iter1_col_reg_244;

assign col_cast_fu_636_p1 = col_phi_fu_248_p4;

assign end_x_cast8_fu_461_p1 = r_V_2_reg_914;

assign end_y_cast7_fu_464_p1 = r_V_18_reg_920;

assign frameBuffer_V1_cast_fu_406_p1 = frameBuffer_V1;

assign grp_fu_887_p0 = grp_fu_887_p00;

assign grp_fu_887_p00 = oldB_V_reg_1071;

assign grp_fu_887_p1 = lhs_V_4_cast_reg_976;

assign grp_fu_887_p2 = rhs_V_8_cast_reg_983;

assign grp_fu_894_p0 = grp_fu_894_p00;

assign grp_fu_894_p00 = oldR_V_reg_1061;

assign grp_fu_894_p1 = lhs_V_4_cast_reg_976;

assign grp_fu_894_p2 = rhs_V_11_cast_reg_998;

assign lhs_V_1_fu_314_p1 = arg0_V;

assign lhs_V_2_fu_374_p1 = clip_y_V;

assign lhs_V_3_fu_360_p1 = arg1_V;

assign lhs_V_4_cast_fu_513_p1 = r_V_4_fu_507_p2;

assign lhs_V_4_fu_517_p1 = newA_V_fu_418_p4;

assign lhs_V_7_cast_fu_768_p1 = r_V_8_reg_1091;

assign lhs_V_fu_328_p1 = clip_x_V;

assign m_axi_frameBuffer_V_ARADDR = sum1_reg_1021;

assign m_axi_frameBuffer_V_ARBURST = 2'd0;

assign m_axi_frameBuffer_V_ARCACHE = 4'd0;

assign m_axi_frameBuffer_V_ARID = 1'd0;

assign m_axi_frameBuffer_V_ARLEN = tmp_2_reg_1003;

assign m_axi_frameBuffer_V_ARLOCK = 2'd0;

assign m_axi_frameBuffer_V_ARPROT = 3'd0;

assign m_axi_frameBuffer_V_ARQOS = 4'd0;

assign m_axi_frameBuffer_V_ARREGION = 4'd0;

assign m_axi_frameBuffer_V_ARSIZE = 3'd0;

assign m_axi_frameBuffer_V_ARUSER = 1'd0;

assign m_axi_frameBuffer_V_AWADDR = frameBuffer_V_addr_reg_1026;

assign m_axi_frameBuffer_V_AWBURST = 2'd0;

assign m_axi_frameBuffer_V_AWCACHE = 4'd0;

assign m_axi_frameBuffer_V_AWID = 1'd0;

assign m_axi_frameBuffer_V_AWLEN = tmp_2_reg_1003;

assign m_axi_frameBuffer_V_AWLOCK = 2'd0;

assign m_axi_frameBuffer_V_AWPROT = 3'd0;

assign m_axi_frameBuffer_V_AWQOS = 4'd0;

assign m_axi_frameBuffer_V_AWREGION = 4'd0;

assign m_axi_frameBuffer_V_AWSIZE = 3'd0;

assign m_axi_frameBuffer_V_AWUSER = 1'd0;

assign m_axi_frameBuffer_V_WDATA = rowBuffer_V_load_reg_1116;

assign m_axi_frameBuffer_V_WID = 1'd0;

assign m_axi_frameBuffer_V_WLAST = 1'b0;

assign m_axi_frameBuffer_V_WSTRB = 4'd15;

assign m_axi_frameBuffer_V_WUSER = 1'd0;

assign newA_V_fu_418_p4 = {{arg6_V[15:8]}};

assign newB_V_fu_442_p1 = arg5_V[7:0];

assign newG_V_fu_432_p4 = {{arg5_V[15:8]}};

assign newR_V_fu_428_p1 = arg6_V[7:0];

assign oldA_V_fu_676_p4 = {{rowBuffer_V_q0[31:24]}};

assign oldB_V_fu_706_p1 = rowBuffer_V_q0[7:0];

assign or_cond_fu_477_p2 = (tmp_5_fu_467_p2 & tmp_6_fu_472_p2);

assign outA_V_fu_715_p3 = ((tmp_19_fu_710_p2[0:0] === 1'b1) ? oldA_V_fu_676_p4 : newA_V_reg_936);

assign p_shl1_fu_603_p3 = {{tmp_25_fu_599_p1}, {7'd0}};

assign p_shl_fu_591_p3 = {{tmp_24_fu_587_p1}, {11'd0}};

assign r_V_10_fu_775_p2 = (rhs_V_4_cast_reg_993 + lhs_V_7_cast_fu_768_p1);

assign r_V_17_fu_368_p2 = (lhs_V_3_fu_360_p1 + rhs_V_3_fu_364_p1);

assign r_V_18_fu_398_p3 = ((tmp_3_fu_392_p2[0:0] === 1'b1) ? r_V_3_fu_386_p2 : r_V_17_fu_368_p2);

assign r_V_1_fu_322_p2 = (lhs_V_1_fu_314_p1 + rhs_V_1_fu_318_p1);

assign r_V_21_fu_553_p0 = r_V_21_fu_553_p00;

assign r_V_21_fu_553_p00 = newR_V_fu_428_p1;

assign r_V_21_fu_553_p1 = lhs_V_4_fu_517_p1;

assign r_V_21_fu_553_p2 = (r_V_21_fu_553_p0 * r_V_21_fu_553_p1);

assign r_V_25_fu_410_p3 = {{arg6_V}, {arg5_V}};

assign r_V_26_fu_780_p3 = {{tmp_20_reg_1097}, {16'd0}};

assign r_V_27_fu_855_p5 = {{{{ap_reg_pp1_iter2_tmp_26_reg_1081}, {tmp_30_fu_845_p4}}, {tmp_29_fu_835_p4}}, {tmp_28_fu_830_p2}};

assign r_V_2_fu_352_p3 = ((tmp_8_fu_346_p2[0:0] === 1'b1) ? r_V_fu_340_p2 : r_V_1_fu_322_p2);

assign r_V_3_fu_386_p2 = (lhs_V_2_fu_374_p1 + rhs_V_2_fu_382_p1);

assign r_V_4_fu_507_p2 = (newA_V_fu_418_p4 ^ 8'd255);

assign r_V_6_fu_525_p0 = r_V_6_fu_525_p00;

assign r_V_6_fu_525_p00 = newB_V_fu_442_p1;

assign r_V_6_fu_525_p1 = lhs_V_4_fu_517_p1;

assign r_V_6_fu_525_p2 = (r_V_6_fu_525_p0 * r_V_6_fu_525_p1);

assign r_V_8_fu_751_p0 = r_V_8_fu_751_p00;

assign r_V_8_fu_751_p00 = oldG_V_reg_1066;

assign r_V_8_fu_751_p1 = lhs_V_4_cast_reg_976;

assign r_V_8_fu_751_p2 = (r_V_8_fu_751_p0 * r_V_8_fu_751_p1);

assign r_V_9_fu_539_p0 = r_V_9_fu_539_p00;

assign r_V_9_fu_539_p00 = newG_V_fu_432_p4;

assign r_V_9_fu_539_p1 = lhs_V_4_fu_517_p1;

assign r_V_9_fu_539_p2 = (r_V_9_fu_539_p0 * r_V_9_fu_539_p1);

assign r_V_fu_340_p2 = (lhs_V_fu_328_p1 + rhs_V_fu_336_p1);

assign rhs_V_11_cast_fu_559_p1 = r_V_21_fu_553_p2;

assign rhs_V_1_fu_318_p1 = arg2_V;

assign rhs_V_2_fu_382_p1 = clip_h_V;

assign rhs_V_3_fu_364_p1 = arg3_V;

assign rhs_V_4_cast_fu_545_p1 = r_V_9_fu_539_p2;

assign rhs_V_8_cast_fu_531_p1 = r_V_6_fu_525_p2;

assign rhs_V_fu_336_p1 = clip_w_V;

assign row_1_fu_576_p2 = (row_reg_233 + 17'd1);

assign row_cast_fu_567_p1 = row_reg_233;

assign row_offset_fu_617_p2 = (start_x_cast1_reg_942 + tmp_10_fu_611_p2);

assign start_x_cast1_fu_446_p1 = clip_x_V_load_arg0_V_reg_901;

assign start_x_cast2_fu_449_p1 = clip_x_V_load_arg0_V_reg_901;

assign start_x_cast_fu_452_p1 = clip_x_V_load_arg0_V_reg_901;

assign start_y_cast9_fu_455_p1 = y_V_reg_908;

assign start_y_cast_fu_458_p1 = y_V_reg_908;

assign sum1_fu_625_p2 = ($signed(frameBuffer_V1_cast_reg_926) + $signed(tmp_11_fu_622_p1));

assign tmp_10_fu_611_p2 = (p_shl_fu_591_p3 - p_shl1_fu_603_p3);

assign tmp_11_fu_622_p1 = $signed(row_offset_reg_1016);

assign tmp_12_fu_640_p2 = (($signed(col_cast_fu_636_p1) < $signed(clipped_w_reg_956)) ? 1'b1 : 1'b0);

assign tmp_14_fu_660_p2 = (($signed(col1_cast_fu_656_p1) < $signed(clipped_w_reg_956)) ? 1'b1 : 1'b0);

assign tmp_16_fu_871_p2 = (($signed(col2_cast_fu_867_p1) < $signed(clipped_w_reg_956)) ? 1'b1 : 1'b0);

assign tmp_18_fu_771_p2 = (r_V_8_reg_1091 + r_V_9_reg_988);

assign tmp_19_fu_710_p2 = ((oldA_V_fu_676_p4 > newA_V_reg_936) ? 1'b1 : 1'b0);

assign tmp_1_fu_300_p2 = ((clip_y_V > arg1_V) ? 1'b1 : 1'b0);

assign tmp_21_fu_787_p4 = {{r_V_10_fu_775_p2[16:8]}};

assign tmp_22_fu_805_p5 = {{{{ap_reg_pp1_iter2_tmp_36_reg_1076}, {7'd0}}, {tmp_21_fu_787_p4}}, {8'd0}};

assign tmp_23_fu_816_p2 = (tmp_22_fu_805_p5 | r_V_26_fu_780_p3);

assign tmp_24_fu_587_p1 = y_idx_fu_582_p2[10:0];

assign tmp_25_fu_599_p1 = y_idx_fu_582_p2[14:0];

assign tmp_27_fu_822_p3 = {{tmp_35_fu_797_p3}, {8'd0}};

assign tmp_28_fu_830_p2 = (tmp_27_fu_822_p3 | tmp_17_reg_1086);

assign tmp_29_fu_835_p4 = {{tmp_18_fu_771_p2[15:9]}};

assign tmp_2_fu_563_p1 = clipped_w_fu_483_p2;

assign tmp_30_fu_845_p4 = {{tmp_23_fu_816_p2[24:16]}};

assign tmp_35_fu_797_p3 = tmp_18_fu_771_p2[32'd8];

assign tmp_36_fu_722_p1 = outA_V_fu_715_p3[0:0];

assign tmp_3_fu_392_p2 = ((r_V_17_fu_368_p2 > r_V_3_fu_386_p2) ? 1'b1 : 1'b0);

assign tmp_4_fu_571_p2 = (($signed(row_cast_fu_567_p1) < $signed(clipped_h_reg_963)) ? 1'b1 : 1'b0);

assign tmp_5_fu_467_p2 = ((r_V_2_reg_914 > start_x_cast_fu_452_p1) ? 1'b1 : 1'b0);

assign tmp_6_fu_472_p2 = ((r_V_18_reg_920 > start_y_cast_fu_458_p1) ? 1'b1 : 1'b0);

assign tmp_8_fu_346_p2 = ((r_V_1_fu_322_p2 > r_V_fu_340_p2) ? 1'b1 : 1'b0);

assign tmp_9_fu_495_p2 = ((newA_V_fu_418_p4 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_fu_282_p2 = ((clip_x_V > arg0_V) ? 1'b1 : 1'b0);

assign tmp_s_fu_501_p2 = ((newA_V_fu_418_p4 == 8'd0) ? 1'b1 : 1'b0);

assign y_V_fu_306_p3 = ((tmp_1_fu_300_p2[0:0] === 1'b1) ? clip_y_V : arg1_V);

assign y_idx_fu_582_p2 = (start_y_cast9_reg_947 + row_cast_fu_567_p1);

always @ (posedge ap_clk) begin
    frameBuffer_V1_cast_reg_926[31:30] <= 2'b00;
    start_x_cast1_reg_942[21:16] <= 6'b000000;
    start_y_cast9_reg_947[17:16] <= 2'b00;
    lhs_V_4_cast_reg_976[15:8] <= 8'b00000000;
    rhs_V_8_cast_reg_983[16] <= 1'b0;
    rhs_V_4_cast_reg_993[16] <= 1'b0;
    rhs_V_11_cast_reg_998[16] <= 1'b0;
    tmp_2_reg_1003[31:18] <= 14'b00000000000000;
end

endmodule //gpu_blit_rect
