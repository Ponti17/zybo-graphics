-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gpu is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of gpu is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "gpu,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z010clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=2,HLS_SYN_FF=2623,HLS_SYN_LUT=2432}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal frameBuffer_V : STD_LOGIC_VECTOR (31 downto 0);
    signal status_V : STD_LOGIC_VECTOR (7 downto 0);
    signal cl_V : STD_LOGIC_VECTOR (31 downto 0);
    signal rowBuffer_V_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rowBuffer_V_1_ce0 : STD_LOGIC;
    signal rowBuffer_V_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowBuffer_V_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rowBuffer_V_1_ce1 : STD_LOGIC;
    signal rowBuffer_V_1_we1 : STD_LOGIC;
    signal rowBuffer_V_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal clip_x_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal clip_y_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal clip_w_V : STD_LOGIC_VECTOR (15 downto 0) := "0000011110000000";
    signal clip_h_V : STD_LOGIC_VECTOR (15 downto 0) := "0000010000111000";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal exitcond_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_209 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_reg_pp0_iter1_i_reg_209 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal gmem_addr_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal frameBuffer_V1_reg_432 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_38_fu_311_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_38_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_321_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_445 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem_addr_read_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_fu_332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_39_reg_455 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_2_fu_340_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_2_reg_459 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_fu_350_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal cmd_V_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmd_V_reg_490 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg0_V_reg_495 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg1_V_fu_408_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg1_V_reg_501 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg2_V_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg3_V_fu_412_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg3_V_reg_513 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal arg5_V_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg5_V_reg_518 : STD_LOGIC_VECTOR (15 downto 0);
    signal arg6_V_reg_523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_gpu_blit_rect_fu_232_ap_start : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_ap_done : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_ap_idle : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_ap_ready : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWVALID : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WVALID : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WLAST : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARVALID : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_RREADY : STD_LOGIC;
    signal grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_BREADY : STD_LOGIC;
    signal StgValue_96_gpu_set_clip_fu_255_arg3_V : STD_LOGIC_VECTOR (15 downto 0);
    signal StgValue_96_gpu_set_clip_fu_255_clip_x_V : STD_LOGIC_VECTOR (15 downto 0);
    signal StgValue_96_gpu_set_clip_fu_255_clip_x_V_ap_vld : STD_LOGIC;
    signal StgValue_96_gpu_set_clip_fu_255_clip_y_V : STD_LOGIC_VECTOR (15 downto 0);
    signal StgValue_96_gpu_set_clip_fu_255_clip_y_V_ap_vld : STD_LOGIC;
    signal StgValue_96_gpu_set_clip_fu_255_clip_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal StgValue_96_gpu_set_clip_fu_255_clip_w_V_ap_vld : STD_LOGIC;
    signal StgValue_96_gpu_set_clip_fu_255_clip_h_V : STD_LOGIC_VECTOR (15 downto 0);
    signal StgValue_96_gpu_set_clip_fu_255_clip_h_V_ap_vld : STD_LOGIC;
    signal i_phi_fu_213_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i1_reg_221 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state17_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_reg_grp_gpu_blit_rect_fu_232_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_34_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast1_fu_327_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_cast_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_gmem_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_ARREADY : STD_LOGIC;
    signal cl_V3_fu_281_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_40_fu_346_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_fu_374_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component gpu_blit_rect IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_frameBuffer_V_AWVALID : OUT STD_LOGIC;
        m_axi_frameBuffer_V_AWREADY : IN STD_LOGIC;
        m_axi_frameBuffer_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frameBuffer_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frameBuffer_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_WVALID : OUT STD_LOGIC;
        m_axi_frameBuffer_V_WREADY : IN STD_LOGIC;
        m_axi_frameBuffer_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_WLAST : OUT STD_LOGIC;
        m_axi_frameBuffer_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_ARVALID : OUT STD_LOGIC;
        m_axi_frameBuffer_V_ARREADY : IN STD_LOGIC;
        m_axi_frameBuffer_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frameBuffer_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_frameBuffer_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_frameBuffer_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_RVALID : IN STD_LOGIC;
        m_axi_frameBuffer_V_RREADY : OUT STD_LOGIC;
        m_axi_frameBuffer_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_frameBuffer_V_RLAST : IN STD_LOGIC;
        m_axi_frameBuffer_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_BVALID : IN STD_LOGIC;
        m_axi_frameBuffer_V_BREADY : OUT STD_LOGIC;
        m_axi_frameBuffer_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_frameBuffer_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_frameBuffer_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        frameBuffer_V1 : IN STD_LOGIC_VECTOR (29 downto 0);
        arg0_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg1_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg2_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg3_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg5_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg6_V : IN STD_LOGIC_VECTOR (15 downto 0);
        clip_x_V : IN STD_LOGIC_VECTOR (15 downto 0);
        clip_y_V : IN STD_LOGIC_VECTOR (15 downto 0);
        clip_w_V : IN STD_LOGIC_VECTOR (15 downto 0);
        clip_h_V : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component gpu_set_clip IS
    port (
        arg0_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg1_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg2_V : IN STD_LOGIC_VECTOR (15 downto 0);
        arg3_V : IN STD_LOGIC_VECTOR (15 downto 0);
        clip_x_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        clip_x_V_ap_vld : OUT STD_LOGIC;
        clip_y_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        clip_y_V_ap_vld : OUT STD_LOGIC;
        clip_w_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        clip_w_V_ap_vld : OUT STD_LOGIC;
        clip_h_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        clip_h_V_ap_vld : OUT STD_LOGIC );
    end component;


    component gpu_rowBuffer_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gpu_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        frameBuffer_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        status_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        cl_V : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component gpu_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    rowBuffer_V_1_U : component gpu_rowBuffer_V_1
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => rowBuffer_V_1_address0,
        ce0 => rowBuffer_V_1_ce0,
        q0 => rowBuffer_V_1_q0,
        address1 => rowBuffer_V_1_address1,
        ce1 => rowBuffer_V_1_ce1,
        we1 => rowBuffer_V_1_we1,
        d1 => gmem_addr_read_reg_450,
        q1 => rowBuffer_V_1_q1);

    gpu_control_s_axi_U : component gpu_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        frameBuffer_V => frameBuffer_V,
        status_V => status_V,
        cl_V => cl_V);

    gpu_gmem_m_axi_U : component gpu_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWADDR,
        I_AWID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWID,
        I_AWLEN => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLEN,
        I_AWSIZE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWSIZE,
        I_AWLOCK => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLOCK,
        I_AWCACHE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWCACHE,
        I_AWQOS => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWQOS,
        I_AWPROT => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWPROT,
        I_AWUSER => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWUSER,
        I_AWBURST => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWBURST,
        I_AWREGION => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WDATA,
        I_WID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WID,
        I_WUSER => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WUSER,
        I_WLAST => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WLAST,
        I_WSTRB => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_gpu_blit_rect_fu_232 : component gpu_blit_rect
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_gpu_blit_rect_fu_232_ap_start,
        ap_done => grp_gpu_blit_rect_fu_232_ap_done,
        ap_idle => grp_gpu_blit_rect_fu_232_ap_idle,
        ap_ready => grp_gpu_blit_rect_fu_232_ap_ready,
        m_axi_frameBuffer_V_AWVALID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWVALID,
        m_axi_frameBuffer_V_AWREADY => gmem_AWREADY,
        m_axi_frameBuffer_V_AWADDR => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWADDR,
        m_axi_frameBuffer_V_AWID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWID,
        m_axi_frameBuffer_V_AWLEN => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLEN,
        m_axi_frameBuffer_V_AWSIZE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWSIZE,
        m_axi_frameBuffer_V_AWBURST => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWBURST,
        m_axi_frameBuffer_V_AWLOCK => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWLOCK,
        m_axi_frameBuffer_V_AWCACHE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWCACHE,
        m_axi_frameBuffer_V_AWPROT => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWPROT,
        m_axi_frameBuffer_V_AWQOS => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWQOS,
        m_axi_frameBuffer_V_AWREGION => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWREGION,
        m_axi_frameBuffer_V_AWUSER => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWUSER,
        m_axi_frameBuffer_V_WVALID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WVALID,
        m_axi_frameBuffer_V_WREADY => gmem_WREADY,
        m_axi_frameBuffer_V_WDATA => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WDATA,
        m_axi_frameBuffer_V_WSTRB => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WSTRB,
        m_axi_frameBuffer_V_WLAST => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WLAST,
        m_axi_frameBuffer_V_WID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WID,
        m_axi_frameBuffer_V_WUSER => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WUSER,
        m_axi_frameBuffer_V_ARVALID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARVALID,
        m_axi_frameBuffer_V_ARREADY => gmem_ARREADY,
        m_axi_frameBuffer_V_ARADDR => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARADDR,
        m_axi_frameBuffer_V_ARID => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARID,
        m_axi_frameBuffer_V_ARLEN => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLEN,
        m_axi_frameBuffer_V_ARSIZE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARSIZE,
        m_axi_frameBuffer_V_ARBURST => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARBURST,
        m_axi_frameBuffer_V_ARLOCK => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLOCK,
        m_axi_frameBuffer_V_ARCACHE => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARCACHE,
        m_axi_frameBuffer_V_ARPROT => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARPROT,
        m_axi_frameBuffer_V_ARQOS => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARQOS,
        m_axi_frameBuffer_V_ARREGION => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARREGION,
        m_axi_frameBuffer_V_ARUSER => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARUSER,
        m_axi_frameBuffer_V_RVALID => gmem_RVALID,
        m_axi_frameBuffer_V_RREADY => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_RREADY,
        m_axi_frameBuffer_V_RDATA => gmem_RDATA,
        m_axi_frameBuffer_V_RLAST => gmem_RLAST,
        m_axi_frameBuffer_V_RID => gmem_RID,
        m_axi_frameBuffer_V_RUSER => gmem_RUSER,
        m_axi_frameBuffer_V_RRESP => gmem_RRESP,
        m_axi_frameBuffer_V_BVALID => gmem_BVALID,
        m_axi_frameBuffer_V_BREADY => grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_BREADY,
        m_axi_frameBuffer_V_BRESP => gmem_BRESP,
        m_axi_frameBuffer_V_BID => gmem_BID,
        m_axi_frameBuffer_V_BUSER => gmem_BUSER,
        frameBuffer_V1 => frameBuffer_V1_reg_432,
        arg0_V => arg0_V_reg_495,
        arg1_V => arg1_V_reg_501,
        arg2_V => arg2_V_reg_507,
        arg3_V => arg3_V_reg_513,
        arg5_V => arg5_V_reg_518,
        arg6_V => arg6_V_reg_523,
        clip_x_V => clip_x_V,
        clip_y_V => clip_y_V,
        clip_w_V => clip_w_V,
        clip_h_V => clip_h_V);

    StgValue_96_gpu_set_clip_fu_255 : component gpu_set_clip
    port map (
        arg0_V => arg0_V_reg_495,
        arg1_V => arg1_V_reg_501,
        arg2_V => arg2_V_reg_507,
        arg3_V => StgValue_96_gpu_set_clip_fu_255_arg3_V,
        clip_x_V => StgValue_96_gpu_set_clip_fu_255_clip_x_V,
        clip_x_V_ap_vld => StgValue_96_gpu_set_clip_fu_255_clip_x_V_ap_vld,
        clip_y_V => StgValue_96_gpu_set_clip_fu_255_clip_y_V,
        clip_y_V_ap_vld => StgValue_96_gpu_set_clip_fu_255_clip_y_V_ap_vld,
        clip_w_V => StgValue_96_gpu_set_clip_fu_255_clip_w_V,
        clip_w_V_ap_vld => StgValue_96_gpu_set_clip_fu_255_clip_w_V_ap_vld,
        clip_h_V => StgValue_96_gpu_set_clip_fu_255_clip_h_V,
        clip_h_V_ap_vld => StgValue_96_gpu_set_clip_fu_255_clip_h_V_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state9 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_gpu_blit_rect_fu_232_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_gpu_blit_rect_fu_232_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                    ap_reg_grp_gpu_blit_rect_fu_232_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_gpu_blit_rect_fu_232_ap_ready)) then 
                    ap_reg_grp_gpu_blit_rect_fu_232_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = gmem_ARREADY)) then 
                        ap_reg_ioackin_gmem_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i1_reg_221 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_on_subcall_done = ap_const_boolean_0))) then 
                i1_reg_221 <= i_2_reg_459;
            end if; 
        end if;
    end process;

    i_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_441 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                i_reg_209 <= i_1_reg_445;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_209 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_reg_441 <= exitcond_reg_441;
                ap_reg_pp0_iter1_i_reg_209 <= i_reg_209;
                exitcond_reg_441 <= exitcond_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                arg0_V_reg_495 <= rowBuffer_V_1_q0(31 downto 16);
                arg1_V_reg_501 <= arg1_V_fu_408_p1;
                arg2_V_reg_507 <= rowBuffer_V_1_q1(31 downto 16);
                cmd_V_reg_490 <= cmd_V_fu_394_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455))) then
                arg3_V_reg_513 <= arg3_V_fu_412_p1;
                arg5_V_reg_518 <= arg5_V_fu_417_p1;
                arg6_V_reg_523 <= rowBuffer_V_1_q1(31 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and (cmd_V_reg_490 = ap_const_lv16_2) and (ap_const_logic_1 = StgValue_96_gpu_set_clip_fu_255_clip_h_V_ap_vld))) then
                clip_h_V <= StgValue_96_gpu_set_clip_fu_255_clip_h_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and (cmd_V_reg_490 = ap_const_lv16_2) and (ap_const_logic_1 = StgValue_96_gpu_set_clip_fu_255_clip_w_V_ap_vld))) then
                clip_w_V <= StgValue_96_gpu_set_clip_fu_255_clip_w_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and (cmd_V_reg_490 = ap_const_lv16_2) and (ap_const_logic_1 = StgValue_96_gpu_set_clip_fu_255_clip_x_V_ap_vld))) then
                clip_x_V <= StgValue_96_gpu_set_clip_fu_255_clip_x_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and (cmd_V_reg_490 = ap_const_lv16_2) and (ap_const_logic_1 = StgValue_96_gpu_set_clip_fu_255_clip_y_V_ap_vld))) then
                clip_y_V <= StgValue_96_gpu_set_clip_fu_255_clip_y_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                frameBuffer_V1_reg_432 <= frameBuffer_V(31 downto 2);
                    gmem_addr_reg_426(29 downto 0) <= tmp_fu_291_p1(29 downto 0);
                tmp_38_reg_437 <= tmp_38_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_reg_441 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                gmem_addr_read_reg_450 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                i_1_reg_445 <= i_1_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                i_2_reg_459 <= i_2_fu_340_p2;
                tmp_39_reg_455 <= i1_reg_221(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_39_fu_332_p3))) then
                    tmp_29_reg_464(7 downto 2) <= tmp_29_fu_350_p3(7 downto 2);
            end if;
        end if;
    end process;
    gmem_addr_reg_426(31 downto 30) <= "00";
    tmp_29_reg_464(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, tmp_38_fu_311_p1, tmp_38_reg_437, exitcond_fu_315_p2, ap_enable_reg_pp0_iter0, tmp_39_fu_332_p3, tmp_39_reg_455, ap_CS_fsm_state13, cmd_V_reg_490, ap_CS_fsm_state15, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_CS_fsm_state17, ap_block_state17_on_subcall_done, tmp_34_fu_421_p2, ap_sig_ioackin_gmem_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (ap_const_lv1_0 = tmp_38_fu_311_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_38_fu_311_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_gmem_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_315_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_fu_315_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_39_fu_332_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((ap_const_lv1_0 = tmp_38_reg_437) or (tmp_39_reg_455 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_34_fu_421_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (((tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and (cmd_V_reg_490 = ap_const_lv16_2)) or ((tmp_38_reg_437 = ap_const_lv1_1) and (ap_const_lv1_0 = tmp_39_reg_455) and (ap_const_lv1_0 = tmp_34_fu_421_p2) and not((cmd_V_reg_490 = ap_const_lv16_1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_block_state17_on_subcall_done = ap_const_boolean_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    StgValue_96_gpu_set_clip_fu_255_arg3_V <= rowBuffer_V_1_q0(16 - 1 downto 0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_441, gmem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_441 = ap_const_lv1_0) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp0_iter1, exitcond_reg_441, gmem_RVALID)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_441 = ap_const_lv1_0) and (ap_const_logic_0 = gmem_RVALID));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(exitcond_reg_441, gmem_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= ((exitcond_reg_441 = ap_const_lv1_0) and (ap_const_logic_0 = gmem_RVALID));
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_on_subcall_done_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_ap_done)
    begin
                ap_block_state17_on_subcall_done <= ((ap_const_logic_0 = grp_gpu_blit_rect_fu_232_ap_done) and (cmd_V_reg_490 = ap_const_lv16_1));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_fu_315_p2)
    begin
        if ((exitcond_fu_315_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(tmp_38_reg_437, tmp_39_reg_455, ap_CS_fsm_state15, tmp_34_fu_421_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((ap_const_lv1_0 = tmp_38_reg_437) or (tmp_39_reg_455 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_34_fu_421_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_38_reg_437, tmp_39_reg_455, ap_CS_fsm_state15, tmp_34_fu_421_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and ((ap_const_lv1_0 = tmp_38_reg_437) or (tmp_39_reg_455 = ap_const_lv1_1) or (ap_const_lv1_1 = tmp_34_fu_421_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_ARREADY_assign_proc : process(gmem_ARREADY, ap_reg_ioackin_gmem_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY)) then 
            ap_sig_ioackin_gmem_ARREADY <= gmem_ARREADY;
        else 
            ap_sig_ioackin_gmem_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    arg1_V_fu_408_p1 <= rowBuffer_V_1_q1(16 - 1 downto 0);
    arg3_V_fu_412_p1 <= rowBuffer_V_1_q0(16 - 1 downto 0);
    arg5_V_fu_417_p1 <= rowBuffer_V_1_q1(16 - 1 downto 0);
    cl_V3_fu_281_p4 <= cl_V(31 downto 2);
    cmd_V_fu_394_p1 <= rowBuffer_V_1_q0(16 - 1 downto 0);
    exitcond_fu_315_p2 <= "1" when (i_phi_fu_213_p4 = ap_const_lv9_100) else "0";

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state2, gmem_addr_reg_426, cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARADDR, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARADDR <= gmem_addr_reg_426;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARADDR <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARBURST, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARBURST <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARCACHE, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARCACHE <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARID, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARID <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state2, cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLEN, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARLEN <= ap_const_lv32_100;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARLEN <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLOCK, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARLOCK <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARPROT, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARPROT <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARQOS, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARQOS <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARREGION, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARREGION <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARSIZE, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARSIZE <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARUSER, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARUSER <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state2, cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARVALID, ap_CS_fsm_state17, ap_CS_fsm_state16, ap_reg_ioackin_gmem_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_logic_0 = ap_reg_ioackin_gmem_ARREADY))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_ARVALID <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWVALID, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_AWVALID <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_BREADY, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_BREADY <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_reg_441, ap_block_pp0_stage0_flag00011001, cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_RREADY, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_reg_441 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_RREADY <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(cmd_V_reg_490, grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WVALID, ap_CS_fsm_state17, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state17) and (cmd_V_reg_490 = ap_const_lv16_1)))) then 
            gmem_WVALID <= grp_gpu_blit_rect_fu_232_m_axi_frameBuffer_V_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_reg_441)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_reg_441 = ap_const_lv1_0))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_gpu_blit_rect_fu_232_ap_start <= ap_reg_grp_gpu_blit_rect_fu_232_ap_start;
    i_1_fu_321_p2 <= std_logic_vector(unsigned(i_phi_fu_213_p4) + unsigned(ap_const_lv9_1));
    i_2_fu_340_p2 <= std_logic_vector(unsigned(i1_reg_221) + unsigned(ap_const_lv7_1));
    i_cast1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_i_reg_209),32));

    i_phi_fu_213_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, exitcond_reg_441, i_reg_209, i_1_reg_445)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (exitcond_reg_441 = ap_const_lv1_0))) then 
            i_phi_fu_213_p4 <= i_1_reg_445;
        else 
            i_phi_fu_213_p4 <= i_reg_209;
        end if; 
    end process;


    rowBuffer_V_1_address0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14, tmp_29_cast_fu_358_p1, tmp_31_cast_fu_379_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rowBuffer_V_1_address0 <= tmp_31_cast_fu_379_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rowBuffer_V_1_address0 <= tmp_29_cast_fu_358_p1(8 - 1 downto 0);
        else 
            rowBuffer_V_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    rowBuffer_V_1_address1_assign_proc : process(ap_block_pp0_stage0_flag00000000, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter2, i_cast1_fu_327_p1, tmp_30_cast_fu_369_p1, tmp_32_cast_fu_389_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            rowBuffer_V_1_address1 <= tmp_32_cast_fu_389_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            rowBuffer_V_1_address1 <= tmp_30_cast_fu_369_p1(8 - 1 downto 0);
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            rowBuffer_V_1_address1 <= i_cast1_fu_327_p1(8 - 1 downto 0);
        else 
            rowBuffer_V_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    rowBuffer_V_1_ce0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            rowBuffer_V_1_ce0 <= ap_const_logic_1;
        else 
            rowBuffer_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowBuffer_V_1_ce1_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            rowBuffer_V_1_ce1 <= ap_const_logic_1;
        else 
            rowBuffer_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rowBuffer_V_1_we1_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond_reg_441, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_reg_441))) then 
            rowBuffer_V_1_we1 <= ap_const_logic_1;
        else 
            rowBuffer_V_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_29_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_350_p3),32));
    tmp_29_fu_350_p3 <= (tmp_40_fu_346_p1 & ap_const_lv2_0);
    tmp_30_cast_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_363_p2),32));
    tmp_30_fu_363_p2 <= (tmp_29_fu_350_p3 or ap_const_lv8_1);
    tmp_31_cast_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_374_p2),32));
    tmp_31_fu_374_p2 <= (tmp_29_reg_464 or ap_const_lv8_2);
    tmp_32_cast_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_384_p2),32));
    tmp_32_fu_384_p2 <= (tmp_29_reg_464 or ap_const_lv8_3);
    tmp_34_fu_421_p2 <= "1" when (cmd_V_reg_490 = ap_const_lv16_0) else "0";
    tmp_38_fu_311_p1 <= status_V(1 - 1 downto 0);
    tmp_39_fu_332_p3 <= i1_reg_221(6 downto 6);
    tmp_40_fu_346_p1 <= i1_reg_221(6 - 1 downto 0);
    tmp_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cl_V3_fu_281_p4),32));
end behav;
