-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gpu_blit_rect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_frameBuffer_V_AWVALID : OUT STD_LOGIC;
    m_axi_frameBuffer_V_AWREADY : IN STD_LOGIC;
    m_axi_frameBuffer_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frameBuffer_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frameBuffer_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_WVALID : OUT STD_LOGIC;
    m_axi_frameBuffer_V_WREADY : IN STD_LOGIC;
    m_axi_frameBuffer_V_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_WLAST : OUT STD_LOGIC;
    m_axi_frameBuffer_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_ARVALID : OUT STD_LOGIC;
    m_axi_frameBuffer_V_ARREADY : IN STD_LOGIC;
    m_axi_frameBuffer_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frameBuffer_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_frameBuffer_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_frameBuffer_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_RVALID : IN STD_LOGIC;
    m_axi_frameBuffer_V_RREADY : OUT STD_LOGIC;
    m_axi_frameBuffer_V_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_frameBuffer_V_RLAST : IN STD_LOGIC;
    m_axi_frameBuffer_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_BVALID : IN STD_LOGIC;
    m_axi_frameBuffer_V_BREADY : OUT STD_LOGIC;
    m_axi_frameBuffer_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_frameBuffer_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_frameBuffer_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    frameBuffer_V1 : IN STD_LOGIC_VECTOR (29 downto 0);
    arg0_V : IN STD_LOGIC_VECTOR (15 downto 0);
    arg1_V : IN STD_LOGIC_VECTOR (15 downto 0);
    arg2_V : IN STD_LOGIC_VECTOR (15 downto 0);
    arg3_V : IN STD_LOGIC_VECTOR (15 downto 0);
    arg5_V : IN STD_LOGIC_VECTOR (15 downto 0);
    arg6_V : IN STD_LOGIC_VECTOR (15 downto 0);
    clip_x_V : IN STD_LOGIC_VECTOR (15 downto 0);
    clip_y_V : IN STD_LOGIC_VECTOR (15 downto 0);
    clip_w_V : IN STD_LOGIC_VECTOR (15 downto 0);
    clip_h_V : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of gpu_blit_rect is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rowBuffer_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal rowBuffer_V_ce0 : STD_LOGIC;
    signal rowBuffer_V_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal rowBuffer_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal rowBuffer_V_ce1 : STD_LOGIC;
    signal rowBuffer_V_we1 : STD_LOGIC;
    signal rowBuffer_V_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal frameBuffer_V_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal frameBuffer_V_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_12_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal frameBuffer_V_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal frameBuffer_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal tmp_16_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_tmp_16_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal frameBuffer_V_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal col_reg_244 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_reg_pp0_iter1_col_reg_244 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal col1_reg_256 : STD_LOGIC_VECTOR (16 downto 0);
    signal col2_reg_267 : STD_LOGIC_VECTOR (16 downto 0);
    signal clip_x_V_load_arg0_V_fu_288_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal clip_x_V_load_arg0_V_reg_901 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_fu_306_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_reg_908 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_352_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_2_reg_914 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_18_fu_398_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_18_reg_920 : STD_LOGIC_VECTOR (16 downto 0);
    signal frameBuffer_V1_cast_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal frameBuffer_V1_cast_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_V_25_fu_410_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_25_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal newA_V_fu_418_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal newA_V_reg_936 : STD_LOGIC_VECTOR (7 downto 0);
    signal start_x_cast1_fu_446_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal start_x_cast1_reg_942 : STD_LOGIC_VECTOR (21 downto 0);
    signal start_y_cast9_fu_455_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal start_y_cast9_reg_947 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_cond_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal clipped_w_fu_483_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal clipped_w_reg_956 : STD_LOGIC_VECTOR (17 downto 0);
    signal clipped_h_fu_489_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal clipped_h_reg_963 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_9_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_972 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_4_cast_fu_513_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_4_cast_reg_976 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_8_cast_fu_531_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_8_cast_reg_983 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_9_fu_539_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_reg_988 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_4_cast_fu_545_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_4_cast_reg_993 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_11_cast_fu_559_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_11_cast_reg_998 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_1_fu_576_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal row_1_reg_1011 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal row_offset_fu_617_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal row_offset_reg_1016 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_4_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum1_fu_625_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal frameBuffer_V_addr_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY : STD_LOGIC;
    signal tmp_12_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_tmp_12_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_1_fu_645_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_1_reg_1036 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal frameBuffer_V_addr_r_1_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state17_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal col_3_fu_665_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal rowBuffer_V_addr_1_reg_1055 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055 : STD_LOGIC_VECTOR (10 downto 0);
    signal oldR_V_reg_1061 : STD_LOGIC_VECTOR (7 downto 0);
    signal oldG_V_reg_1066 : STD_LOGIC_VECTOR (7 downto 0);
    signal oldB_V_fu_706_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal oldB_V_reg_1071 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_fu_722_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter2_tmp_36_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_1081 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_pp1_iter2_tmp_26_reg_1081 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_reg_1086 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_8_fu_751_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_reg_1091 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_1097 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state21_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_frameBuffer_V_WREADY : STD_LOGIC;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal col_2_fu_876_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal rowBuffer_V_load_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY : STD_LOGIC;
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state21 : STD_LOGIC;
    signal row_reg_233 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_phi_fu_248_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal col_cast5_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col1_cast4_fu_671_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal col2_cast2_fu_882_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_frameBuffer_V_WREADY : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00001001 : BOOLEAN;
    signal r_V_27_fu_855_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_1_fu_314_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_1_fu_318_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_fu_328_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_336_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_322_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_fu_340_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_3_fu_360_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_3_fu_364_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_2_fu_374_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_2_fu_382_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_17_fu_368_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_3_fu_386_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start_x_cast_fu_452_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal start_y_cast_fu_458_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal end_x_cast8_fu_461_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal start_x_cast2_fu_449_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal end_y_cast7_fu_464_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newB_V_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_525_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_525_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_4_fu_517_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_525_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal newG_V_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_539_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_fu_539_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal newR_V_fu_428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_553_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_553_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_21_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal row_cast_fu_567_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_idx_fu_582_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_24_fu_587_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_599_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl_fu_591_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_shl1_fu_603_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_10_fu_611_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_11_fu_622_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_cast_fu_636_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal col1_cast_fu_656_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal oldA_V_fu_676_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outA_V_fu_715_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_887_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_8_fu_751_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_8_fu_751_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_894_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal lhs_V_7_cast_fu_768_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_10_fu_775_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_18_fu_771_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_787_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_805_p5 : STD_LOGIC_VECTOR (24 downto 0);
    signal r_V_26_fu_780_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_35_fu_797_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_822_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_816_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_30_fu_845_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_fu_835_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_830_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal col2_cast_fu_867_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_887_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_887_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_887_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_894_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_894_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_894_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_887_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_894_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_21_fu_553_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_6_fu_525_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_8_fu_751_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_9_fu_539_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component gpu_mac_muladd_8ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component gpu_blit_rect_rowbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    rowBuffer_V_U : component gpu_blit_rect_rowbkb
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rowBuffer_V_address0,
        ce0 => rowBuffer_V_ce0,
        q0 => rowBuffer_V_q0,
        address1 => rowBuffer_V_address1,
        ce1 => rowBuffer_V_ce1,
        we1 => rowBuffer_V_we1,
        d1 => rowBuffer_V_d1);

    gpu_mac_muladd_8ncud_U8 : component gpu_mac_muladd_8ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_887_p0,
        din1 => grp_fu_887_p1,
        din2 => grp_fu_887_p2,
        dout => grp_fu_887_p3);

    gpu_mac_muladd_8ncud_U9 : component gpu_mac_muladd_8ncud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 17)
    port map (
        din0 => grp_fu_894_p0,
        din1 => grp_fu_894_p1,
        din2 => grp_fu_894_p2,
        dout => grp_fu_894_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state12 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state21)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state21 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = ap_const_logic_1))) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    if ((ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_frameBuffer_V_ARREADY)) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                    if ((ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_frameBuffer_V_AWREADY)) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_frameBuffer_V_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_1 = ap_reg_pp2_iter1_tmp_16_reg_1102))) then
                    if ((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_logic_1 = m_axi_frameBuffer_V_WREADY) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0))) then 
                        ap_reg_ioackin_m_axi_frameBuffer_V_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    col1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                col1_reg_256 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_1 = tmp_14_fu_660_p2))) then 
                col1_reg_256 <= col_3_fu_665_p2;
            end if; 
        end if;
    end process;

    col2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = ap_const_logic_1))) then 
                col2_reg_267 <= ap_const_lv17_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_1 = tmp_16_fu_871_p2))) then 
                col2_reg_267 <= col_2_fu_876_p2;
            end if; 
        end if;
    end process;

    col_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_12_reg_1032 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
                col_reg_244 <= col_1_reg_1036;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                col_reg_244 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    row_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_frameBuffer_V_BVALID = ap_const_logic_1))) then 
                row_reg_233 <= row_1_reg_1011;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = or_cond_fu_477_p2))) then 
                row_reg_233 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_col_reg_244 <= col_reg_244;
                ap_reg_pp0_iter1_tmp_12_reg_1032 <= tmp_12_reg_1032;
                tmp_12_reg_1032 <= tmp_12_fu_640_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055 <= rowBuffer_V_addr_1_reg_1055;
                oldB_V_reg_1071 <= oldB_V_fu_706_p1;
                oldG_V_reg_1066 <= rowBuffer_V_q0(15 downto 8);
                oldR_V_reg_1061 <= rowBuffer_V_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055 <= ap_reg_pp1_iter1_rowBuffer_V_addr_1_reg_1055;
                ap_reg_pp1_iter2_tmp_26_reg_1081 <= tmp_26_reg_1081;
                ap_reg_pp1_iter2_tmp_36_reg_1076 <= tmp_36_reg_1076;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_tmp_16_reg_1102 <= tmp_16_reg_1102;
                tmp_16_reg_1102 <= tmp_16_fu_871_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                clip_x_V_load_arg0_V_reg_901 <= clip_x_V_load_arg0_V_fu_288_p3;
                r_V_18_reg_920 <= r_V_18_fu_398_p3;
                r_V_2_reg_914 <= r_V_2_fu_352_p3;
                y_V_reg_908 <= y_V_fu_306_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = or_cond_fu_477_p2))) then
                clipped_h_reg_963 <= clipped_h_fu_489_p2;
                clipped_w_reg_956 <= clipped_w_fu_483_p2;
                    lhs_V_4_cast_reg_976(7 downto 0) <= lhs_V_4_cast_fu_513_p1(7 downto 0);
                r_V_9_reg_988 <= r_V_9_fu_539_p2;
                    rhs_V_11_cast_reg_998(15 downto 0) <= rhs_V_11_cast_fu_559_p1(15 downto 0);
                    rhs_V_4_cast_reg_993(15 downto 0) <= rhs_V_4_cast_fu_545_p1(15 downto 0);
                    rhs_V_8_cast_reg_983(15 downto 0) <= rhs_V_8_cast_fu_531_p1(15 downto 0);
                    tmp_2_reg_1003(17 downto 0) <= tmp_2_fu_563_p1(17 downto 0);
                tmp_9_reg_968 <= tmp_9_fu_495_p2;
                tmp_s_reg_972 <= tmp_s_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                col_1_reg_1036 <= col_1_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    frameBuffer_V1_cast_reg_926(29 downto 0) <= frameBuffer_V1_cast_fu_406_p1(29 downto 0);
                newA_V_reg_936 <= arg6_V(15 downto 8);
                or_cond_reg_952 <= or_cond_fu_477_p2;
                r_V_25_reg_931 <= r_V_25_fu_410_p3;
                    start_x_cast1_reg_942(15 downto 0) <= start_x_cast1_fu_446_p1(15 downto 0);
                    start_y_cast9_reg_947(15 downto 0) <= start_y_cast9_fu_455_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_1032 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                frameBuffer_V_addr_r_1_reg_1041 <= m_axi_frameBuffer_V_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY = ap_const_logic_1))) then
                frameBuffer_V_addr_reg_1026 <= sum1_reg_1021;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0))) then
                r_V_8_reg_1091 <= r_V_8_fu_751_p2;
                tmp_17_reg_1086 <= grp_fu_887_p3(16 downto 8);
                tmp_20_reg_1097 <= grp_fu_894_p3(16 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = tmp_14_fu_660_p2))) then
                rowBuffer_V_addr_1_reg_1055 <= col1_cast4_fu_671_p1(11 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_1 = tmp_16_reg_1102))) then
                rowBuffer_V_load_reg_1116 <= rowBuffer_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = or_cond_reg_952))) then
                row_1_reg_1011 <= row_1_fu_576_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = or_cond_reg_952) and (ap_const_lv1_1 = tmp_4_fu_571_p2))) then
                row_offset_reg_1016 <= row_offset_fu_617_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                sum1_reg_1021 <= sum1_fu_625_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0))) then
                tmp_26_reg_1081 <= outA_V_fu_715_p3(7 downto 1);
                tmp_36_reg_1076 <= tmp_36_fu_722_p1;
            end if;
        end if;
    end process;
    frameBuffer_V1_cast_reg_926(31 downto 30) <= "00";
    start_x_cast1_reg_942(21 downto 16) <= "000000";
    start_y_cast9_reg_947(17 downto 16) <= "00";
    lhs_V_4_cast_reg_976(15 downto 8) <= "00000000";
    rhs_V_8_cast_reg_983(16) <= '0';
    rhs_V_4_cast_reg_993(16) <= '0';
    rhs_V_11_cast_reg_998(16) <= '0';
    tmp_2_reg_1003(31 downto 18) <= "00000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_frameBuffer_V_BVALID, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1, ap_CS_fsm_state20, ap_enable_reg_pp2_iter2, ap_CS_fsm_state28, or_cond_reg_952, ap_CS_fsm_state3, tmp_4_fu_571_p2, ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY, tmp_12_fu_640_p2, ap_enable_reg_pp0_iter0, tmp_14_fu_660_p2, ap_enable_reg_pp1_iter0, tmp_16_fu_871_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00011011, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY, ap_block_pp2_stage0_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((or_cond_reg_952 = ap_const_lv1_0) or (tmp_4_fu_571_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_12_fu_640_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (tmp_12_fu_640_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (tmp_14_fu_660_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (tmp_14_fu_660_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_16_fu_871_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_0 = tmp_16_fu_871_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_frameBuffer_V_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(14);
    ap_CS_fsm_state28 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00011001_assign_proc : process(m_axi_frameBuffer_V_RVALID, ap_enable_reg_pp0_iter1, tmp_12_reg_1032)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_12_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_frameBuffer_V_RVALID));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(m_axi_frameBuffer_V_RVALID, ap_enable_reg_pp0_iter1, tmp_12_reg_1032)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_12_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_frameBuffer_V_RVALID));
    end process;

        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00001001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_flag00011001_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state23_io)
    begin
                ap_block_pp2_stage0_flag00011001 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;


    ap_block_pp2_stage0_flag00011011_assign_proc : process(ap_enable_reg_pp2_iter2, ap_block_state23_io)
    begin
                ap_block_pp2_stage0_flag00011011 <= ((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_boolean_1 = ap_block_state23_io));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter1_assign_proc : process(m_axi_frameBuffer_V_RVALID, tmp_12_reg_1032)
    begin
                ap_block_state13_pp0_stage0_iter1 <= ((tmp_12_reg_1032 = ap_const_lv1_1) and (ap_const_logic_0 = m_axi_frameBuffer_V_RVALID));
    end process;

        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(ap_reg_pp2_iter1_tmp_16_reg_1102, ap_sig_ioackin_m_axi_frameBuffer_V_WREADY)
    begin
                ap_block_state23_io <= ((ap_const_lv1_1 = ap_reg_pp2_iter1_tmp_16_reg_1102) and (ap_const_logic_0 = ap_sig_ioackin_m_axi_frameBuffer_V_WREADY));
    end process;

        ap_block_state23_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state12_assign_proc : process(tmp_12_fu_640_p2)
    begin
        if ((tmp_12_fu_640_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(tmp_14_fu_660_p2)
    begin
        if ((tmp_14_fu_660_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state21_assign_proc : process(tmp_16_fu_871_p2)
    begin
        if ((ap_const_lv1_0 = tmp_16_fu_871_p2)) then 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, or_cond_reg_952, ap_CS_fsm_state3, tmp_4_fu_571_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and ((or_cond_reg_952 = ap_const_lv1_0) or (tmp_4_fu_571_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2) and (ap_const_logic_0 = ap_enable_reg_pp1_iter3))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(or_cond_reg_952, ap_CS_fsm_state3, tmp_4_fu_571_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((or_cond_reg_952 = ap_const_lv1_0) or (tmp_4_fu_571_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY_assign_proc : process(m_axi_frameBuffer_V_ARREADY, ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY)) then 
            ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY <= m_axi_frameBuffer_V_ARREADY;
        else 
            ap_sig_ioackin_m_axi_frameBuffer_V_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY_assign_proc : process(m_axi_frameBuffer_V_AWREADY, ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY)) then 
            ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY <= m_axi_frameBuffer_V_AWREADY;
        else 
            ap_sig_ioackin_m_axi_frameBuffer_V_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_frameBuffer_V_WREADY_assign_proc : process(m_axi_frameBuffer_V_WREADY, ap_reg_ioackin_m_axi_frameBuffer_V_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_WREADY)) then 
            ap_sig_ioackin_m_axi_frameBuffer_V_WREADY <= m_axi_frameBuffer_V_WREADY;
        else 
            ap_sig_ioackin_m_axi_frameBuffer_V_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    clip_x_V_load_arg0_V_fu_288_p3 <= 
        clip_x_V when (tmp_fu_282_p2(0) = '1') else 
        arg0_V;
    clipped_h_fu_489_p2 <= std_logic_vector(unsigned(end_y_cast7_fu_464_p1) - unsigned(start_y_cast9_fu_455_p1));
    clipped_w_fu_483_p2 <= std_logic_vector(unsigned(end_x_cast8_fu_461_p1) - unsigned(start_x_cast2_fu_449_p1));
    col1_cast4_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col1_reg_256),32));
    col1_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col1_reg_256),18));
    col2_cast2_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_267),32));
    col2_cast_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col2_reg_267),18));
    col_1_fu_645_p2 <= std_logic_vector(unsigned(col_phi_fu_248_p4) + unsigned(ap_const_lv17_1));
    col_2_fu_876_p2 <= std_logic_vector(unsigned(col2_reg_267) + unsigned(ap_const_lv17_1));
    col_3_fu_665_p2 <= std_logic_vector(unsigned(col1_reg_256) + unsigned(ap_const_lv17_1));
    col_cast5_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_col_reg_244),32));
    col_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_phi_fu_248_p4),18));

    col_phi_fu_248_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_12_reg_1032, col_reg_244, col_1_reg_1036)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (tmp_12_reg_1032 = ap_const_lv1_1))) then 
            col_phi_fu_248_p4 <= col_1_reg_1036;
        else 
            col_phi_fu_248_p4 <= col_reg_244;
        end if; 
    end process;

    end_x_cast8_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_reg_914),18));
    end_y_cast7_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_18_reg_920),18));
    frameBuffer_V1_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(frameBuffer_V1),32));

    frameBuffer_V_blk_n_AR_assign_proc : process(m_axi_frameBuffer_V_ARREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            frameBuffer_V_blk_n_AR <= m_axi_frameBuffer_V_ARREADY;
        else 
            frameBuffer_V_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    frameBuffer_V_blk_n_AW_assign_proc : process(m_axi_frameBuffer_V_AWREADY, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            frameBuffer_V_blk_n_AW <= m_axi_frameBuffer_V_AWREADY;
        else 
            frameBuffer_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    frameBuffer_V_blk_n_B_assign_proc : process(m_axi_frameBuffer_V_BVALID, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            frameBuffer_V_blk_n_B <= m_axi_frameBuffer_V_BVALID;
        else 
            frameBuffer_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    frameBuffer_V_blk_n_R_assign_proc : process(m_axi_frameBuffer_V_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000, tmp_12_reg_1032)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (tmp_12_reg_1032 = ap_const_lv1_1))) then 
            frameBuffer_V_blk_n_R <= m_axi_frameBuffer_V_RVALID;
        else 
            frameBuffer_V_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    frameBuffer_V_blk_n_W_assign_proc : process(m_axi_frameBuffer_V_WREADY, ap_enable_reg_pp2_iter2, ap_block_pp2_stage0_flag00000000, ap_reg_pp2_iter1_tmp_16_reg_1102)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp2_iter1_tmp_16_reg_1102))) then 
            frameBuffer_V_blk_n_W <= m_axi_frameBuffer_V_WREADY;
        else 
            frameBuffer_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_887_p0 <= grp_fu_887_p00(8 - 1 downto 0);
    grp_fu_887_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oldB_V_reg_1071),16));
    grp_fu_887_p1 <= lhs_V_4_cast_reg_976(8 - 1 downto 0);
    grp_fu_887_p2 <= rhs_V_8_cast_reg_983(16 - 1 downto 0);
    grp_fu_894_p0 <= grp_fu_894_p00(8 - 1 downto 0);
    grp_fu_894_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oldR_V_reg_1061),16));
    grp_fu_894_p1 <= lhs_V_4_cast_reg_976(8 - 1 downto 0);
    grp_fu_894_p2 <= rhs_V_11_cast_reg_998(16 - 1 downto 0);
    lhs_V_1_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg0_V),17));
    lhs_V_2_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_y_V),17));
    lhs_V_3_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg1_V),17));
    lhs_V_4_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_4_fu_507_p2),16));
    lhs_V_4_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newA_V_fu_418_p4),16));
    lhs_V_7_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_reg_1091),17));
    lhs_V_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_x_V),17));
    m_axi_frameBuffer_V_ARADDR <= sum1_reg_1021;
    m_axi_frameBuffer_V_ARBURST <= ap_const_lv2_0;
    m_axi_frameBuffer_V_ARCACHE <= ap_const_lv4_0;
    m_axi_frameBuffer_V_ARID <= ap_const_lv1_0;
    m_axi_frameBuffer_V_ARLEN <= tmp_2_reg_1003;
    m_axi_frameBuffer_V_ARLOCK <= ap_const_lv2_0;
    m_axi_frameBuffer_V_ARPROT <= ap_const_lv3_0;
    m_axi_frameBuffer_V_ARQOS <= ap_const_lv4_0;
    m_axi_frameBuffer_V_ARREGION <= ap_const_lv4_0;
    m_axi_frameBuffer_V_ARSIZE <= ap_const_lv3_0;
    m_axi_frameBuffer_V_ARUSER <= ap_const_lv1_0;

    m_axi_frameBuffer_V_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_ARREADY))) then 
            m_axi_frameBuffer_V_ARVALID <= ap_const_logic_1;
        else 
            m_axi_frameBuffer_V_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_frameBuffer_V_AWADDR <= frameBuffer_V_addr_reg_1026;
    m_axi_frameBuffer_V_AWBURST <= ap_const_lv2_0;
    m_axi_frameBuffer_V_AWCACHE <= ap_const_lv4_0;
    m_axi_frameBuffer_V_AWID <= ap_const_lv1_0;
    m_axi_frameBuffer_V_AWLEN <= tmp_2_reg_1003;
    m_axi_frameBuffer_V_AWLOCK <= ap_const_lv2_0;
    m_axi_frameBuffer_V_AWPROT <= ap_const_lv3_0;
    m_axi_frameBuffer_V_AWQOS <= ap_const_lv4_0;
    m_axi_frameBuffer_V_AWREGION <= ap_const_lv4_0;
    m_axi_frameBuffer_V_AWSIZE <= ap_const_lv3_0;
    m_axi_frameBuffer_V_AWUSER <= ap_const_lv1_0;

    m_axi_frameBuffer_V_AWVALID_assign_proc : process(ap_CS_fsm_state20, ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_AWREADY))) then 
            m_axi_frameBuffer_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_frameBuffer_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_frameBuffer_V_BREADY_assign_proc : process(m_axi_frameBuffer_V_BVALID, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) and (m_axi_frameBuffer_V_BVALID = ap_const_logic_1))) then 
            m_axi_frameBuffer_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_frameBuffer_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_frameBuffer_V_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_12_reg_1032, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (tmp_12_reg_1032 = ap_const_lv1_1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            m_axi_frameBuffer_V_RREADY <= ap_const_logic_1;
        else 
            m_axi_frameBuffer_V_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_frameBuffer_V_WDATA <= rowBuffer_V_load_reg_1116;
    m_axi_frameBuffer_V_WID <= ap_const_lv1_0;
    m_axi_frameBuffer_V_WLAST <= ap_const_logic_0;
    m_axi_frameBuffer_V_WSTRB <= ap_const_lv4_F;
    m_axi_frameBuffer_V_WUSER <= ap_const_lv1_0;

    m_axi_frameBuffer_V_WVALID_assign_proc : process(ap_enable_reg_pp2_iter2, ap_reg_pp2_iter1_tmp_16_reg_1102, ap_reg_ioackin_m_axi_frameBuffer_V_WREADY, ap_block_pp2_stage0_flag00001001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_1 = ap_reg_pp2_iter1_tmp_16_reg_1102) and (ap_block_pp2_stage0_flag00001001 = ap_const_boolean_0) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_frameBuffer_V_WREADY))) then 
            m_axi_frameBuffer_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_frameBuffer_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    newA_V_fu_418_p4 <= arg6_V(15 downto 8);
    newB_V_fu_442_p1 <= arg5_V(8 - 1 downto 0);
    newG_V_fu_432_p4 <= arg5_V(15 downto 8);
    newR_V_fu_428_p1 <= arg6_V(8 - 1 downto 0);
    oldA_V_fu_676_p4 <= rowBuffer_V_q0(31 downto 24);
    oldB_V_fu_706_p1 <= rowBuffer_V_q0(8 - 1 downto 0);
    or_cond_fu_477_p2 <= (tmp_5_fu_467_p2 and tmp_6_fu_472_p2);
    outA_V_fu_715_p3 <= 
        oldA_V_fu_676_p4 when (tmp_19_fu_710_p2(0) = '1') else 
        newA_V_reg_936;
    p_shl1_fu_603_p3 <= (tmp_25_fu_599_p1 & ap_const_lv7_0);
    p_shl_fu_591_p3 <= (tmp_24_fu_587_p1 & ap_const_lv11_0);
    r_V_10_fu_775_p2 <= std_logic_vector(unsigned(rhs_V_4_cast_reg_993) + unsigned(lhs_V_7_cast_fu_768_p1));
    r_V_17_fu_368_p2 <= std_logic_vector(unsigned(lhs_V_3_fu_360_p1) + unsigned(rhs_V_3_fu_364_p1));
    r_V_18_fu_398_p3 <= 
        r_V_3_fu_386_p2 when (tmp_3_fu_392_p2(0) = '1') else 
        r_V_17_fu_368_p2;
    r_V_1_fu_322_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_314_p1) + unsigned(rhs_V_1_fu_318_p1));
    r_V_21_fu_553_p0 <= r_V_21_fu_553_p00(8 - 1 downto 0);
    r_V_21_fu_553_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newR_V_fu_428_p1),16));
    r_V_21_fu_553_p1 <= lhs_V_4_fu_517_p1(8 - 1 downto 0);
    r_V_21_fu_553_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_21_fu_553_p0) * unsigned(r_V_21_fu_553_p1), 16));
    r_V_25_fu_410_p3 <= (arg6_V & arg5_V);
    r_V_26_fu_780_p3 <= (tmp_20_reg_1097 & ap_const_lv16_0);
    r_V_27_fu_855_p5 <= (((ap_reg_pp1_iter2_tmp_26_reg_1081 & tmp_30_fu_845_p4) & tmp_29_fu_835_p4) & tmp_28_fu_830_p2);
    r_V_2_fu_352_p3 <= 
        r_V_fu_340_p2 when (tmp_8_fu_346_p2(0) = '1') else 
        r_V_1_fu_322_p2;
    r_V_3_fu_386_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_374_p1) + unsigned(rhs_V_2_fu_382_p1));
    r_V_4_fu_507_p2 <= (newA_V_fu_418_p4 xor ap_const_lv8_FF);
    r_V_6_fu_525_p0 <= r_V_6_fu_525_p00(8 - 1 downto 0);
    r_V_6_fu_525_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newB_V_fu_442_p1),16));
    r_V_6_fu_525_p1 <= lhs_V_4_fu_517_p1(8 - 1 downto 0);
    r_V_6_fu_525_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_525_p0) * unsigned(r_V_6_fu_525_p1), 16));
    r_V_8_fu_751_p0 <= r_V_8_fu_751_p00(8 - 1 downto 0);
    r_V_8_fu_751_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oldG_V_reg_1066),16));
    r_V_8_fu_751_p1 <= lhs_V_4_cast_reg_976(8 - 1 downto 0);
    r_V_8_fu_751_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_fu_751_p0) * unsigned(r_V_8_fu_751_p1), 16));
    r_V_9_fu_539_p0 <= r_V_9_fu_539_p00(8 - 1 downto 0);
    r_V_9_fu_539_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newG_V_fu_432_p4),16));
    r_V_9_fu_539_p1 <= lhs_V_4_fu_517_p1(8 - 1 downto 0);
    r_V_9_fu_539_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_fu_539_p0) * unsigned(r_V_9_fu_539_p1), 16));
    r_V_fu_340_p2 <= std_logic_vector(unsigned(lhs_V_fu_328_p1) + unsigned(rhs_V_fu_336_p1));
    rhs_V_11_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_21_fu_553_p2),17));
    rhs_V_1_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg2_V),17));
    rhs_V_2_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_h_V),17));
    rhs_V_3_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arg3_V),17));
    rhs_V_4_cast_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_9_fu_539_p2),17));
    rhs_V_8_cast_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_525_p2),17));
    rhs_V_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_w_V),17));

    rowBuffer_V_address0_assign_proc : process(ap_block_pp2_stage0_flag00000000, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, col1_cast4_fu_671_p1, ap_block_pp1_stage0_flag00000000, col2_cast2_fu_882_p1)
    begin
        if (((ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then 
            rowBuffer_V_address0 <= col2_cast2_fu_882_p1(11 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            rowBuffer_V_address0 <= col1_cast4_fu_671_p1(11 - 1 downto 0);
        else 
            rowBuffer_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rowBuffer_V_address1_assign_proc : process(ap_block_pp0_stage0_flag00000000, tmp_9_reg_968, tmp_s_reg_972, ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter3, col_cast5_fu_651_p1, ap_block_pp1_stage0_flag00000000)
    begin
        if ((((tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_const_lv1_1 = tmp_9_reg_968)))) then 
            rowBuffer_V_address1 <= ap_reg_pp1_iter2_rowBuffer_V_addr_1_reg_1055;
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            rowBuffer_V_address1 <= col_cast5_fu_651_p1(11 - 1 downto 0);
        else 
            rowBuffer_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    rowBuffer_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp2_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)))) then 
            rowBuffer_V_ce0 <= ap_const_logic_1;
        else 
            rowBuffer_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rowBuffer_V_ce1_assign_proc : process(ap_block_pp0_stage0_flag00011001, tmp_9_reg_968, tmp_s_reg_972, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_const_lv1_1 = tmp_9_reg_968)))) then 
            rowBuffer_V_ce1 <= ap_const_logic_1;
        else 
            rowBuffer_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    rowBuffer_V_d1_assign_proc : process(ap_block_pp0_stage0_flag00000000, r_V_25_reg_931, tmp_9_reg_968, tmp_s_reg_972, frameBuffer_V_addr_r_1_reg_1041, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter3, ap_block_pp1_stage0_flag00000000, r_V_27_fu_855_p5)
    begin
        if (((ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_const_lv1_1 = tmp_9_reg_968))) then 
            rowBuffer_V_d1 <= r_V_25_reg_931;
        elsif (((tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3))) then 
            rowBuffer_V_d1 <= r_V_27_fu_855_p5;
        elsif (((ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            rowBuffer_V_d1 <= frameBuffer_V_addr_r_1_reg_1041;
        else 
            rowBuffer_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    rowBuffer_V_we1_assign_proc : process(ap_block_pp0_stage0_flag00011001, tmp_9_reg_968, tmp_s_reg_972, ap_reg_pp0_iter1_tmp_12_reg_1032, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter3)
    begin
        if ((((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_1 = ap_reg_pp0_iter1_tmp_12_reg_1032)) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (tmp_9_reg_968 = ap_const_lv1_0) and (tmp_s_reg_972 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_const_lv1_1 = tmp_9_reg_968)))) then 
            rowBuffer_V_we1 <= ap_const_logic_1;
        else 
            rowBuffer_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_576_p2 <= std_logic_vector(unsigned(row_reg_233) + unsigned(ap_const_lv17_1));
    row_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_233),18));
    row_offset_fu_617_p2 <= std_logic_vector(unsigned(start_x_cast1_reg_942) + unsigned(tmp_10_fu_611_p2));
    start_x_cast1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_x_V_load_arg0_V_reg_901),22));
    start_x_cast2_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_x_V_load_arg0_V_reg_901),18));
    start_x_cast_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clip_x_V_load_arg0_V_reg_901),17));
    start_y_cast9_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_908),18));
    start_y_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_908),17));
    sum1_fu_625_p2 <= std_logic_vector(unsigned(frameBuffer_V1_cast_reg_926) + unsigned(tmp_11_fu_622_p1));
    tmp_10_fu_611_p2 <= std_logic_vector(unsigned(p_shl_fu_591_p3) - unsigned(p_shl1_fu_603_p3));
        tmp_11_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(row_offset_reg_1016),32));

    tmp_12_fu_640_p2 <= "1" when (signed(col_cast_fu_636_p1) < signed(clipped_w_reg_956)) else "0";
    tmp_14_fu_660_p2 <= "1" when (signed(col1_cast_fu_656_p1) < signed(clipped_w_reg_956)) else "0";
    tmp_16_fu_871_p2 <= "1" when (signed(col2_cast_fu_867_p1) < signed(clipped_w_reg_956)) else "0";
    tmp_18_fu_771_p2 <= std_logic_vector(unsigned(r_V_8_reg_1091) + unsigned(r_V_9_reg_988));
    tmp_19_fu_710_p2 <= "1" when (unsigned(oldA_V_fu_676_p4) > unsigned(newA_V_reg_936)) else "0";
    tmp_1_fu_300_p2 <= "1" when (unsigned(clip_y_V) > unsigned(arg1_V)) else "0";
    tmp_21_fu_787_p4 <= r_V_10_fu_775_p2(16 downto 8);
    tmp_22_fu_805_p5 <= (((ap_reg_pp1_iter2_tmp_36_reg_1076 & ap_const_lv7_0) & tmp_21_fu_787_p4) & ap_const_lv8_0);
    tmp_23_fu_816_p2 <= (tmp_22_fu_805_p5 or r_V_26_fu_780_p3);
    tmp_24_fu_587_p1 <= y_idx_fu_582_p2(11 - 1 downto 0);
    tmp_25_fu_599_p1 <= y_idx_fu_582_p2(15 - 1 downto 0);
    tmp_27_fu_822_p3 <= (tmp_35_fu_797_p3 & ap_const_lv8_0);
    tmp_28_fu_830_p2 <= (tmp_27_fu_822_p3 or tmp_17_reg_1086);
    tmp_29_fu_835_p4 <= tmp_18_fu_771_p2(15 downto 9);
    tmp_2_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(clipped_w_fu_483_p2),32));
    tmp_30_fu_845_p4 <= tmp_23_fu_816_p2(24 downto 16);
    tmp_35_fu_797_p3 <= tmp_18_fu_771_p2(8 downto 8);
    tmp_36_fu_722_p1 <= outA_V_fu_715_p3(1 - 1 downto 0);
    tmp_3_fu_392_p2 <= "1" when (unsigned(r_V_17_fu_368_p2) > unsigned(r_V_3_fu_386_p2)) else "0";
    tmp_4_fu_571_p2 <= "1" when (signed(row_cast_fu_567_p1) < signed(clipped_h_reg_963)) else "0";
    tmp_5_fu_467_p2 <= "1" when (unsigned(r_V_2_reg_914) > unsigned(start_x_cast_fu_452_p1)) else "0";
    tmp_6_fu_472_p2 <= "1" when (unsigned(r_V_18_reg_920) > unsigned(start_y_cast_fu_458_p1)) else "0";
    tmp_8_fu_346_p2 <= "1" when (unsigned(r_V_1_fu_322_p2) > unsigned(r_V_fu_340_p2)) else "0";
    tmp_9_fu_495_p2 <= "1" when (newA_V_fu_418_p4 = ap_const_lv8_FF) else "0";
    tmp_fu_282_p2 <= "1" when (unsigned(clip_x_V) > unsigned(arg0_V)) else "0";
    tmp_s_fu_501_p2 <= "1" when (newA_V_fu_418_p4 = ap_const_lv8_0) else "0";
    y_V_fu_306_p3 <= 
        clip_y_V when (tmp_1_fu_300_p2(0) = '1') else 
        arg1_V;
    y_idx_fu_582_p2 <= std_logic_vector(unsigned(start_y_cast9_reg_947) + unsigned(row_cast_fu_567_p1));
end behav;
